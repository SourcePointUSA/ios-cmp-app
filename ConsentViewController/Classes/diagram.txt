@startuml
' STYLE START
hide empty members
skinparam shadowing false
' STYLE END


class "SPUIValues" as SPUIValues << (P, GoldenRod) protocol >> { 
  ~{static} defaultFallbackTextColorForDarkMode : UIColor 
}
class "Constants" as Constants << (S, SkyBlue) struct >> {  
}
class "SPIDFAStatus" as SPIDFAStatus << (E, LightSteelBlue) enum >> { 
  +unknown
  +accepted
  +denied
  +unavailable
  +{static} requestAuthorisation(handler:)
  +{static} current()
  +description : String
  +init(fromApple:) 
}
class "SPIDFAStatus" as SPIDFAStatus0 << (X, Orchid) extension >> { 
  +encode(to:) 
}
class "Connectivity" as Connectivity << (P, GoldenRod) protocol >> { 
  ~isConnectedToNetwork() 
}
class "ConnectivityManager" as ConnectivityManager << (C, DarkSeaGreen) >> { 
  +init()
  ~isConnectedToNetwork()
  ~getConnectivityFlags()
  ~ipv6Connectivity()
  ~ipv4Connectivity() 
}
class "SPConsentManager" as SPConsentManager << (C, DarkSeaGreen) >> { 
  ~{static} DefaultTimeout
  +{static} shouldCallErrorMetrics
  +cleanUserDataOnError : Bool
  +messageTimeoutInSeconds
  +privacyManagerTab
  +messageLanguage
  +init(accountId:propertyName:campaignsEnv:campaigns:delegate:)
  ~accountId : Int
  ~propertyName : SPPropertyName
  ~campaigns : SPCampaigns
  ~spClient : SourcePointProtocol
  ~deviceManager : SPDeviceManager
  ~delegate : SPDelegate?
  ~authId : String?
  ~storage : SPLocalStorage
  ~messageControllersStack : [SPMessageView]
  ~idfaStatus : SPIDFAStatus
  ~ccpaUUID : String
  ~gdprUUID : String
  ~propertyId : Int?
  ~propertyIdString : String
  ~iOSMessagePartitionUUID : String?
  ~messagesToShow
  ~responsesToReceive
  ~init(accountId:propertyName:campaignsEnv:campaigns:delegate:spClient:storage:deviceManager:)
  ~handleSDKDone()
  ~renderNextMessageIfAny()
  ~nextMessageIfAny(_:)
  ~messageToViewController(_:_:_:_:)
  ~storeData(localState:userData:propertyId:)
  ~saveChildPmId(campaigns:)
  ~report(action:)
  ~loadWebPrivacyManager(_:_:)
  ~onConsentReceived()
  +gracefullyDegradeOnError(_:)
  +onError(_:)
  -logErrorMetrics(_:)
  -selectPrivacyManagerId(fallbackId:groupPmId:childPmId:) 
}
class "SPConsentManager" as SPConsentManager1 << (X, Orchid) extension >> { 
  +{static} VERSION
  +{static} clearAllData()
  +gdprApplies : Bool
  +ccpaApplies : Bool
  +userData : SPUserData
  +loadMessage(forAuthId:publisherData:)
  +loadGDPRPrivacyManager(withId:tab:useGroupPmIfAvailable:)
  +loadCCPAPrivacyManager(withId:tab:useGroupPmIfAvailable:)
  +customConsentGDPR(vendors:categories:legIntCategories:handler:)
  +deleteCustomConsentGDPR(vendors:categories:legIntCategories:handler:) 
}
class "SPConsentManager" as SPConsentManager2 << (X, Orchid) extension >> { 
  +loaded(_:)
  +loaded(_:)
  +finished(_:)
  reportIdfaStatus(status:messageId:)
  +action(_:from:)
  onAction(_:from:) 
}
class "SPNativePMDelegate" as SPNativePMDelegate << (P, GoldenRod) protocol >> { 
  ~onGDPR2ndLayerNavigate(messageId:handler:)
  ~onCCPA2ndLayerNavigate(messageId:handler:) 
}
class "SPConsentManager" as SPConsentManager3 << (X, Orchid) extension >> { 
  onGDPR2ndLayerNavigate(messageId:handler:)
  onCCPA2ndLayerNavigate(messageId:handler:) 
}
class "SPMessageLanguage" as SPMessageLanguage << (E, LightSteelBlue) enum >> { 
  +BrowserDefault
  +English
  +Bulgarian
  +Catalan
  +Chinese
  +Croatian
  +Czech
  +Danish
  +Dutch
  +Estonian
  +Finnish
  +French
  +Gaelic
  +German
  +Greek
  +Hungarian
  +Icelandic
  +Italian
  +Japanese
  +Latvian
  +Lithuanian
  +Norwegian
  +Polish
  +Portuguese
  +Romanian
  +Russian
  +Serbian_Cyrillic
  +Serbian_Latin
  +Slovakian
  +Slovenian
  +Spanish
  +Swedish
  +Turkish
  +rawValue : RawValue
  +init(rawValue:) 
}
class "SPCampaignEnv" as SPCampaignEnv << (E, LightSteelBlue) enum >> { 
  -{static} string
  +Stage
  +Public
  ~stringValue : String?
  ~description : String
  +init(stringValue:) 
}
class "SPCampaignEnv" as SPCampaignEnv4 << (X, Orchid) extension >> { 
  {static} decodeFromSingleValue(_:)
  {static} decodeFromArray(_:)
  +encode(to:)
  +init(from:) 
}
class "ConsentStatusMetaData" as ConsentStatusMetaData << (S, SkyBlue) struct >> { 
  ~gdpr : Campaign?
  ~ccpa : Campaign? 
}
class "AppleTrackingPayload" as AppleTrackingPayload << (S, SkyBlue) struct >> { 
  ~appleChoice : SPIDFAStatus
  ~appleMsgId : Int?
  ~messagePartitionUUID : String? 
}
class "IDFAStatusReportRequest" as IDFAStatusReportRequest << (S, SkyBlue) struct >> { 
  ~accountId : Int
  ~propertyId : Int?
  ~uuid : String?
  ~uuidType : SPCampaignType?
  ~requestUUID : UUID
  ~iosVersion : String
  ~appleTracking : AppleTrackingPayload 
}
class "IDFAStatusReportRequest" as IDFAStatusReportRequest5 << (X, Orchid) extension >> { 
  init(accountId:propertyId:uuid:uuidType:requestUUID:messageId:idfaStatus:iosVersion:messagePartitionUUID:) 
}
class "DeleteCustomConsentResponse" as DeleteCustomConsentResponse << (S, SkyBlue) struct >> { 
  ~grants : SPGDPRVendorGrants 
}
class "DeleteCustomConsentRequest" as DeleteCustomConsentRequest << (S, SkyBlue) struct >> { 
  ~vendors : [String]
  ~categories : [String]
  ~legIntCategories : [String] 
}
class "CampaignRequest" as CampaignRequest << (S, SkyBlue) struct >> { 
  ~groupPmId : String?
  ~targetingParams : SPTargetingParams 
}
class "CampaignsRequest" as CampaignsRequest << (S, SkyBlue) struct >> { 
  ~gdpr : CampaignRequest?
  ~ccpa : CampaignRequest?
  ~ios14 : CampaignRequest?
  ~{static} spCampaignToRequest(_:) 
}
class "CampaignsRequest" as CampaignsRequest6 << (X, Orchid) extension >> { 
  init(from:) 
}
class "MessageRequest" as MessageRequest << (S, SkyBlue) struct >> { 
  ~authId : String?
  ~requestUUID : UUID
  ~propertyHref : SPPropertyName
  ~accountId : Int
  ~campaignEnv : SPCampaignEnv
  ~idfaStatus : SPIDFAStatus
  ~localState : SPJson
  ~consentLanguage : SPMessageLanguage
  ~campaigns : CampaignsRequest
  ~pubData : SPPublisherData
  ~includeData 
}
class "GDPRConsentRequest" as GDPRConsentRequest << (S, SkyBlue) struct >> { 
  ~authId : String?
  ~idfaStatus : SPIDFAStatus
  ~localState : SPJson
  ~pmSaveAndExitVariables : SPJson?
  ~pubData : SPPublisherData
  ~requestUUID : UUID
  ~includeData 
}
class "CCPAConsentRequest" as CCPAConsentRequest << (S, SkyBlue) struct >> { 
  ~authId : String?
  ~localState : SPJson
  ~pubData : SPPublisherData
  ~pmSaveAndExitVariables : SPJson?
  ~requestUUID : UUID
  ~includeData 
}
class "ConsentResponse" as ConsentResponse << (S, SkyBlue) struct >> { 
  ~localState : SPJson
  ~userConsent : Consent
  ~init(from:) 
}
class "Defaultable" as Defaultable << (P, GoldenRod) protocol >> {  
}
class "Defaultable" as Defaultable7 << (X, Orchid) extension >> { 
  init(from:) 
}
class "MessageCategory" as MessageCategory << (E, LightSteelBlue) enum >> { 
  ~gdpr
  ~ccpa
  ~ios14
  ~unknown
  ~campaignType : SPCampaignType 
}
class "MessageSubCategory" as MessageSubCategory << (E, LightSteelBlue) enum >> { 
  ~PM
  ~TCFv2
  ~NativeInApp
  ~PMOTT
  ~NonTCF
  ~PMNonTCF
  ~ios
  ~CCPAOTT
  ~NativePMOTT
  ~unknown 
}
class "Message" as Message << (S, SkyBlue) struct >> { 
  ~messageJson : MessageJson
  ~categories : [GDPRCategory]?
  ~messageChoices : SPJson
  ~propertyId : Int
  ~language : String?
  ~category : MessageCategory
  ~subCategory : MessageSubCategory
  ~init(category:subCategory:decoder:) 
}
class "MessageJson" as MessageJson << (E, LightSteelBlue) enum >> { 
  ~nativePM(_:)
  ~native(_:)
  ~web(_:)
  ~unknown 
}
class "MessageJson" as MessageJson8 << (X, Orchid) extension >> { 
  encode(to:)
  init(from:)
  init(type:campaignType:decoder:) 
}
class "Consent" as Consent << (E, LightSteelBlue) enum >> { 
  ~gdpr(consents:)
  ~ccpa(consents:)
  ~unknown 
}
class "Consent" as Consent9 << (X, Orchid) extension >> { 
  encode(to:)
  init(from:) 
}
class "MessageMetaData" as MessageMetaData << (S, SkyBlue) struct >> { 
  ~categoryId : MessageCategory
  ~subCategoryId : MessageSubCategory
  ~messageId : String
  ~messagePartitionUUID : String? 
}
class "MessageMetaData" as MessageMetaData10 << (X, Orchid) extension >> { 
  init(from:) 
}
class "Campaign" as Campaign << (S, SkyBlue) struct >> { 
  ~type : SPCampaignType
  ~url : URL?
  ~message : Message?
  ~userConsent : Consent
  ~applies : Bool?
  ~messageMetaData : MessageMetaData?
  ~consentStatus : ConsentStatus?
  ~dateCreated : SPDateCreated 
}
class "Campaign" as Campaign11 << (X, Orchid) extension >> { 
  init(from:) 
}
class "MessagesResponse" as MessagesResponse << (S, SkyBlue) struct >> { 
  ~propertyId : Int
  ~campaigns : [Campaign]
  ~localState : SPJson
  ~nonKeyedLocalState : SPJson
  ~init(from:) 
}
class "MessageResponse" as MessageResponse << (S, SkyBlue) struct >> { 
  ~message : Message
  ~messageMetaData : MessageMetaData 
}
class "MessageResponse" as MessageResponse12 << (X, Orchid) extension >> { 
  init(from:) 
}
class "MessagesResponse" as MessagesResponse13 << (X, Orchid) extension >> { 
  init(propertyId:localState:campaigns:nonKeyedLocalState:) 
}
class "Message" as Message14 << (X, Orchid) extension >> { 
  init(propertyId:language:category:subCategory:messageChoices:webMessageJson:categories:) 
}
class "QueryParamEncodable" as QueryParamEncodable << (P, GoldenRod) protocol >> { 
  ~stringified()
  ~stringifiedParams(sorted:) 
}
class "QueryParamEncodable" as QueryParamEncodable15 << (X, Orchid) extension >> { 
  stringified()
  stringifiedParams(sorted:) 
}
class "MessagesRequest" as MessagesRequest << (S, SkyBlue) struct >> { 
  ~body : Body
  ~metadata : MetaData?
  ~nonKeyedLocalState : SPJson? 
}
class "MessagesRequest.Body.Campaigns" as MessagesRequest.Body.Campaigns << (X, Orchid) extension >> { 
  init() 
}
class "ErrorMetricsRequest" as ErrorMetricsRequest << (S, SkyBlue) struct >> { 
  ~code : String
  ~accountId : String
  ~description : String
  ~sdkVersion : String
  ~OSVersion : String
  ~deviceFamily : String
  ~propertyId : String
  ~propertyName : SPPropertyName
  ~campaignType : SPCampaignType 
}
class "ErrorMetricsRequest" as ErrorMetricsRequest16 << (X, Orchid) extension >> {  
}
class "CustomConsentResponse" as CustomConsentResponse << (S, SkyBlue) struct >> { 
  ~grants : SPGDPRVendorGrants 
}
class "CustomConsentRequest" as CustomConsentRequest << (S, SkyBlue) struct >> { 
  ~consentUUID : String
  ~propertyId : Int
  ~vendors : [String]
  ~categories : [String]
  ~legIntCategories : [String] 
}
class "GDPRVendor" as GDPRVendor << (S, SkyBlue) struct >> { 
  ~vendorId : String
  ~name : String
  ~iabId : Int?
  ~policyUrl : URL?
  ~description : String?
  ~cookieHeader : String?
  ~vendorType : VendorType
  ~consentCategories : [Category]
  ~legIntCategories : [Category]
  ~iabSpecialPurposes : [String]
  ~iabFeatures : [String]
  ~iabSpecialFeatures : [String]
  ~init(from:) 
}
class "GDPRVendor" as GDPRVendor17 << (X, Orchid) extension >> { 
  id : String
  {static} ==(_:_:)
  hash(into:) 
}
class "PrivacyManagerViewResponse" as PrivacyManagerViewResponse << (E, LightSteelBlue) enum >> { 
  ~gdpr(_:)
  ~ccpa(_:)
  ~unknown 
}
class "PrivacyManagerViewResponse" as PrivacyManagerViewResponse18 << (X, Orchid) extension >> { 
  init(from:)
  init(campaignType:decoder:) 
}
class "GDPRPrivacyManagerViewResponse" as GDPRPrivacyManagerViewResponse << (S, SkyBlue) struct >> { 
  ~vendors : [GDPRVendor]
  ~categories : [GDPRCategory]
  ~specialPurposes : [GDPRCategory]
  ~features : [GDPRCategory]
  ~specialFeatures : [GDPRCategory]
  ~grants : SPGDPRVendorGrants? 
}
class "CCPAVendor" as CCPAVendor << (S, SkyBlue) struct >> { 
  ~_id : String
  ~name : String
  ~policyUrl : URL?
  -nullablePurposes : [String?]?
  ~purposes : [String] 
}
class "CCPAVendor" as CCPAVendor19 << (X, Orchid) extension >> { 
  init(from:) 
}
class "CCPACategory" as CCPACategory << (S, SkyBlue) struct >> { 
  ~_id : String
  ~name : String
  ~description : String
  ~requiringConsentVendors : [CCPAVendor]
  ~legIntVendors : [CCPAVendor]
  ~defaultOptedIn : Bool 
}
class "CCPAPrivacyManagerViewResponse" as CCPAPrivacyManagerViewResponse << (S, SkyBlue) struct >> { 
  ~vendors : [CCPAVendor]
  ~categories : [CCPACategory]
  ~rejectedCategories : [String]?
  ~rejectedVendors : [String]?
  ~consentStatus : CCPAConsentStatus? 
}
class "ConsentStatusResponse" as ConsentStatusResponse << (S, SkyBlue) struct >> { 
  ~consentStatusData : Data
  ~localState : SPJson 
}
class "PrivacyManagerViewData" as PrivacyManagerViewData << (S, SkyBlue) struct >> { 
  ~homeView : SPNativeView
  ~categoriesView : SPNativeView
  ~vendorsView : SPNativeView
  ~categoryDetailsView : SPNativeView
  ~vendorDetailsView : SPNativeView
  ~privacyPolicyView : SPNativeView? 
}
class "PrivacyManagerViewData" as PrivacyManagerViewData20 << (X, Orchid) extension >> { 
  init(from:) 
}
class "PrivacyManagerViewData" as PrivacyManagerViewData21 << (X, Orchid) extension >> { 
  {static} ==(_:_:) 
}
class "SPNativeFont" as SPNativeFont << (C, DarkSeaGreen) >> { 
  ~fontSize : CGFloat
  ~fontWeight : String
  ~color : String?
  ~fontFamily : String 
}
class "SPNativeStyle" as SPNativeStyle << (C, DarkSeaGreen) >> { 
  ~backgroundColor : String?
  ~font : SPNativeFont?
  ~onFocusBackgroundColor : String?
  ~onUnfocusBackgroundColor : String?
  ~onFocusTextColor : String?
  ~onUnfocusTextColor : String?
  ~activeBackgroundColor : String?
  ~activeFont : SPNativeFont? 
}
class "SPNativeUIType" as SPNativeUIType << (E, LightSteelBlue) enum >> { 
  ~unknown 
}
class "SPNativeUIType" as SPNativeUIType22 << (X, Orchid) extension >> { 
  +rawValue : String
  +init(rawValue:)
  +init(from:) 
}
class "SPNativeUISettings" as SPNativeUISettings << (C, DarkSeaGreen) >> { 
  ~style : SPNativeStyle? 
}
class "SPNativeUISettingsText" as SPNativeUISettingsText << (C, DarkSeaGreen) >> { 
  ~text : String
  ~init(from:) 
}
class "SPNativeUI" as SPNativeUI << (C, DarkSeaGreen) >> { 
  ~id : String
  ~type : SPNativeUIType 
}
class "SPNativeView" as SPNativeView << (C, DarkSeaGreen) >> { 
  ~children : [SPNativeUI]
  ~settings : SPNativeUISettings
  ~byId(_:)
  ~init(from:) 
}
class "SPNativeText" as SPNativeText << (C, DarkSeaGreen) >> { 
  ~settings : SPNativeUISettingsText
  ~init(from:) 
}
class "SPNativeButton" as SPNativeButton << (C, DarkSeaGreen) >> { 
  ~settings : SPNativeUISettingsText
  ~init(from:) 
}
class "SPNativeImage" as SPNativeImage << (C, DarkSeaGreen) >> { 
  ~settings : Settings
  ~init(from:) 
}
class "SPNativeLongButton" as SPNativeLongButton << (C, DarkSeaGreen) >> { 
  ~settings : Settings
  ~init(from:) 
}
class "SPNativeSlider" as SPNativeSlider << (C, DarkSeaGreen) >> { 
  ~settings : Settings
  ~init(from:) 
}
class "GDPRCategory" as GDPRCategory << (C, DarkSeaGreen) >> { 
  ~iabId : Int?
  ~_id : String
  ~name : String
  ~description : String
  ~type : GDPRCategory.CategoryType?
  ~legIntVendors : [Vendor]?
  ~requiringConsentVendors : [Vendor]?
  ~uniqueVendorIds : [String] 
}
class "GDPRCategory" as GDPRCategory23 << (X, Orchid) extension >> { 
  id : String
  {static} ==(_:_:)
  hash(into:) 
}
class "GDPRCategory.CategoryType" as GDPRCategory.CategoryType << (X, Orchid) extension >> { 
  +rawValue : String
  +init(rawValue:)
  +init(from:) 
}
class "SPURLSessionDataTask" as SPURLSessionDataTask << (P, GoldenRod) protocol >> { 
  ~resume() 
}
class "SPURLSession" as SPURLSession << (P, GoldenRod) protocol >> { 
  ~configuration : URLSessionConfiguration
  ~dataTask(_:completionHandler:) 
}
class "SPDispatchQueue" as SPDispatchQueue << (P, GoldenRod) protocol >> { 
  ~async(execute:) 
}
class "URLSession" as URLSession << (X, Orchid) extension >> { 
  dataTask(_:completionHandler:) 
}
class "URLSessionDataTask" as URLSessionDataTask << (X, Orchid) extension >> {  
}
class "DispatchQueue" as DispatchQueue << (X, Orchid) extension >> { 
  async(execute:) 
}
class "HttpClient" as HttpClient << (P, GoldenRod) protocol >> { 
  ~get(urlString:handler:)
  ~post(urlString:body:handler:)
  ~delete(urlString:body:handler:) 
}
class "SimpleClient" as SimpleClient << (C, DarkSeaGreen) >> { 
  ~connectivityManager : Connectivity
  ~logger : SPLogger
  ~session : SPURLSession
  ~dispatchQueue : SPDispatchQueue
  ~logCalls : Bool
  ~logRequest(_:_:_:)
  ~logRequest(_:_:)
  ~logResponse(_:_:)
  ~init(connectivityManager:logger:urlSession:dispatchQueue:)
  ~init(timeoutAfter:)
  ~request(_:_:)
  ~post(urlString:body:handler:)
  ~get(urlString:handler:)
  ~delete(urlString:body:handler:) 
}
class "Result" as Result << (X, Orchid) extension >> { 
  decoded(using:) 
}
class "JSONEncoder" as JSONEncoder << (X, Orchid) extension >> { 
  encodeResult(_:) 
}
class "JSONDecoder" as JSONDecoder << (X, Orchid) extension >> { 
  decode(_:from:) 
}
class "SourcePointProtocol" as SourcePointProtocol << (P, GoldenRod) protocol >> { 
  ~init(accountId:propertyName:campaignEnv:timeout:)
  ~getMessages(_:handler:)
  ~getGDPRMessage(propertyId:consentLanguage:messageId:handler:)
  ~getCCPAMessage(propertyId:consentLanguage:messageId:handler:)
  ~gdprPrivacyManagerView(propertyId:consentLanguage:handler:)
  ~ccpaPrivacyManagerView(propertyId:consentLanguage:handler:)
  ~postCCPAAction(authId:action:localState:idfaStatus:handler:)
  ~postGDPRAction(authId:action:localState:idfaStatus:handler:)
  ~reportIdfaStatus(propertyId:uuid:uuidType:messageId:idfaStatus:iosVersion:partitionUUID:)
  ~customConsentGDPR(toConsentUUID:vendors:categories:legIntCategories:propertyId:handler:)
  ~errorMetrics(_:propertyId:sdkVersion:OSVersion:deviceFamily:campaignType:)
  ~deleteCustomConsentGDPR(toConsentUUID:vendors:categories:legIntCategories:propertyId:handler:)
  ~consentStatus(propertyId:metadata:authId:handler:)
  ~setRequestTimeout(_:) 
}
class "SourcePointClient" as SourcePointClient << (C, DarkSeaGreen) >> { 
  ~accountId : Int
  ~propertyName : SPPropertyName
  ~campaignEnv : SPCampaignEnv
  ~client : HttpClient
  ~requestUUID
  ~init(accountId:propertyName:campaignEnv:client:)
  ~init(accountId:propertyName:campaignEnv:timeout:)
  ~setRequestTimeout(_:)
  ~getGDPRMessage(propertyId:consentLanguage:messageId:handler:)
  ~getCCPAMessage(propertyId:consentLanguage:messageId:handler:)
  ~gdprPrivacyManagerView(propertyId:consentLanguage:handler:)
  ~ccpaPrivacyManagerView(propertyId:consentLanguage:handler:)
  ~consentUrl(_:_:)
  ~postCCPAAction(authId:action:localState:idfaStatus:handler:)
  ~postGDPRAction(authId:action:localState:idfaStatus:handler:)
  ~reportIdfaStatus(propertyId:uuid:uuidType:messageId:idfaStatus:iosVersion:partitionUUID:)
  ~customConsentGDPR(toConsentUUID:vendors:categories:legIntCategories:propertyId:handler:)
  ~deleteCustomConsentGDPR(toConsentUUID:vendors:categories:legIntCategories:propertyId:handler:)
  ~deleteCustomConsentUrl(_:_:_:)
  ~errorMetrics(_:propertyId:sdkVersion:OSVersion:deviceFamily:campaignType:) 
}
class "SourcePointClient" as SourcePointClient24 << (X, Orchid) extension >> { 
  consentStatusURLWithParams(propertyId:metadata:authId:)
  consentStatus(propertyId:metadata:authId:handler:)
  getMessages(_:handler:) 
}
class "SPJson" as SPJson << (X, Orchid) extension >> {  
}
class "ConsentStatus" as ConsentStatus << (S, SkyBlue) struct >> { 
  ~granularStatus : GranularStatus?
  ~rejectedAny : Bool?
  ~rejectedLI : Bool?
  ~consentedAll : Bool?
  ~hasConsentData : Bool?
  ~consentedToAny : Bool? 
}
class "ConsentStatus.GranularStatus" as ConsentStatus.GranularStatus << (X, Orchid) extension >> { 
  init() 
}
class "ConsentStatus" as ConsentStatus25 << (X, Orchid) extension >> { 
  init() 
}
class "CCPAConsentStatus" as CCPAConsentStatus << (E, LightSteelBlue) enum >> { 
  +RejectedNone
  +RejectedSome
  +RejectedAll
  +ConsentedAll
  +rawValue : RawValue
  +init(rawValue:) 
}
class "SPCCPAConsent" as SPCCPAConsent << (C, DarkSeaGreen) >> { 
  +{static} defaultUsPrivacyString
  +{static} empty()
  +status : CCPAConsentStatus
  +rejectedVendors : [String]
  +rejectedCategories : [String]
  +uspstring : SPUsPrivacyString
  +uuid : String?
  ~childPmId : String?
  +{static} rejectedNone()
  +init(uuid:status:rejectedVendors:rejectedCategories:uspstring:childPmId:)
  +description : String
  +init(from:)
  +isEqual(_:) 
}
class "SPGDPRVendorGrant" as SPGDPRVendorGrant << (C, DarkSeaGreen) >> { 
  +granted : Bool
  +purposeGrants : SPGDPRPurposeGrants
  ~softGranted : Bool
  +description : String
  +isEqual(_:)
  +init(granted:purposeGrants:) 
}
class "SPGDPRConsent" as SPGDPRConsent << (C, DarkSeaGreen) >> { 
  +{static} empty()
  +vendorGrants : SPGDPRVendorGrants
  +euconsent : String
  +tcfData : SPJson?
  +uuid : String?
  ~childPmId : String?
  +acceptedCategories : [String]
  +init(uuid:vendorGrants:euconsent:tcfData:childPmId:)
  +isEqual(_:)
  +description : String 
}
class "SPConsent" as SPConsent<ConsentType: Codable & Equatable> << (C, DarkSeaGreen) >> { 
  +consents : ConsentType?
  +applies : Bool
  +init(consents:applies:)
  +description : String 
}
class "SPConsent" as SPConsent26 << (X, Orchid) extension >> { 
  init(from:) 
}
class "SPUserData" as SPUserData << (C, DarkSeaGreen) >> { 
  +gdpr : SPConsent<SPGDPRConsent>?
  +ccpa : SPConsent<SPCCPAConsent>?
  +init(gdpr:ccpa:)
  +description : String
  +isEqual(_:) 
}
class "SPUserData" as SPUserData27 << (X, Orchid) extension >> { 
  init(from:) 
}
class "SPObjcUserData" as SPObjcUserData << (P, GoldenRod) protocol >> { 
  +objcGDPRConsents()
  +objcGDPRApplies()
  +objcCCPAConsents()
  +objcCCPAApplies() 
}
class "SPUserData" as SPUserData28 << (X, Orchid) extension >> { 
  +objcGDPRConsents()
  +objcGDPRApplies()
  +objcCCPAConsents()
  +objcCCPAApplies() 
}
class "SPMessage" as SPMessage << (C, DarkSeaGreen) >> {  
}
class "SPMessageUIDelegate" as SPMessageUIDelegate << (P, GoldenRod) protocol >> { 
  +loaded(_:)
  +loaded(_:)
  +action(_:from:)
  +onError(_:)
  +finished(_:) 
}
class "SPPrivacyManagerTab" as SPPrivacyManagerTab << (E, LightSteelBlue) enum >> { 
  +Default
  +Purposes
  +Vendors
  +Features
  +rawValue : RawValue
  +init(rawValue:) 
}
class "SPCampaign" as SPCampaign << (C, DarkSeaGreen) >> { 
  ~targetingParams : SPTargetingParams
  ~groupPmId : String?
  +init(targetingParams:groupPmId:) 
}
class "SPCampaigns" as SPCampaigns << (C, DarkSeaGreen) >> { 
  ~gdpr : SPCampaign?
  ~ccpa : SPCampaign?
  ~ios14 : SPCampaign?
  +init(gdpr:ccpa:ios14:) 
}
class "SPPropertyName" as SPPropertyName << (C, DarkSeaGreen) >> { 
  ~{static} validPattern
  -{static} validate(_:)
  ~rawValue : String
  +description : String
  +init(_:)
  +init(from:)
  +encode(to:)
  +isEqual(_:) 
}
class "SPStringifiedJSON" as SPStringifiedJSON << (C, DarkSeaGreen) >> { 
  ~raw
  ~init(from:)
  ~encode(to:) 
}
class "SPStringifiedJSON" as SPStringifiedJSON29 << (X, Orchid) extension >> { 
  startIndex : Index
  endIndex : Index
  index(after:) 
}
class "Collection" as Collection << (X, Orchid) extension >> { 
  isNotEmpty() 
}
class "URL" as URL << (X, Orchid) extension >> { 
  appendQueryItems(_:) 
}
class "String" as String << (X, Orchid) extension >> { 
  htmlToAttributedString : NSAttributedString?
  htmlToString : String
  stripOutHtml() 
}
class "NSObject" as NSObject << (X, Orchid) extension >> { 
  +toJSON()
  -toJSON(withEncodableObject:) 
}
class "SPConsentUIDelegate" as SPConsentUIDelegate << (P, GoldenRod) protocol >> { 
  +onAction(_:from:) 
}
class "SPConsentDelegate" as SPConsentDelegate << (P, GoldenRod) protocol >> { 
  +onSPUIReady(_:)
  +onSPNativeMessageReady(_:)
  +onSPUIFinished(_:)
  +onConsentReady(userData:)
  +onSPFinished(userData:)
  +onError(error:) 
}
class "SPDelegate" as SPDelegate << (P, GoldenRod) protocol >> {  
}
class "Foundation.Bundle" as Foundation.Bundle << (X, Orchid) extension >> { 
  {static} framework : Bundle 
}
class "SPNativeMessage" as SPNativeMessage << (C, DarkSeaGreen) >> { 
  +messageUIDelegate : SPMessageUIDelegate?
  +campaignType : SPCampaignType
  +messageId : String
  +timeout : TimeInterval
  +loadMessage()
  +loadPrivacyManager(url:)
  +closePrivacyManager()
  +title : Attribute
  +body : Attribute
  +actions : [Action]
  +customFields : CustomFields
  +init(title:body:actions:customFields:)
  +init(from:) 
}
class "SPDeviceManager" as SPDeviceManager << (P, GoldenRod) protocol >> { 
  ~osVersion()
  ~deviceFamily() 
}
class "SPDevice" as SPDevice << (S, SkyBlue) struct >> { 
  ~osVersion()
  ~deviceFamily() 
}
class "SPCCPA" as SPCCPA << (P, GoldenRod) protocol >> { 
  +loadCCPAPrivacyManager(withId:tab:useGroupPmIfAvailable:)
  +ccpaApplies : Bool 
}
class "SPGDPR" as SPGDPR << (P, GoldenRod) protocol >> { 
  +loadGDPRPrivacyManager(withId:tab:useGroupPmIfAvailable:)
  +gdprApplies : Bool 
}
class "SPSDK" as SPSDK << (P, GoldenRod) protocol >> { 
  +{static} VERSION : String
  +{static} clearAllData()
  +cleanUserDataOnError : Bool
  +messageTimeoutInSeconds : TimeInterval
  +privacyManagerTab : SPPrivacyManagerTab
  +messageLanguage : SPMessageLanguage
  +userData : SPUserData
  +init(accountId:propertyName:campaignsEnv:campaigns:delegate:)
  +loadMessage(forAuthId:publisherData:)
  +customConsentGDPR(vendors:categories:legIntCategories:handler:)
  +deleteCustomConsentGDPR(vendors:categories:legIntCategories:handler:) 
}
class "SPSDK" as SPSDK30 << (X, Orchid) extension >> { 
  +init(accountId:propertyName:campaignsEnv:campaigns:delegate:)
  +loadMessage(forAuthId:pubData:)
  +loadCCPAPrivacyManager(withId:tab:useGroupPmIfAvailable:)
  +loadGDPRPrivacyManager(withId:tab:useGroupPmIfAvailable:) 
}
class "Storage" as Storage << (P, GoldenRod) protocol >> { 
  ~integer(forKey:)
  ~string(forKey:)
  ~object(ofType:forKey:)
  ~set(_:forKey:)
  ~setObject(_:forKey:)
  ~setValuesForKeys(_:)
  ~removeObject(forKey:)
  ~removeObjects(forKeys:)
  ~dictionaryRepresentation() 
}
class "UserDefaults" as UserDefaults << (X, Orchid) extension >> { 
  setObject(_:forKey:)
  object(ofType:forKey:)
  removeObjects(forKeys:) 
}
class "SPLocalStorage" as SPLocalStorage << (P, GoldenRod) protocol >> { 
  ~storage : Storage
  ~tcfData : [String: Any]?
  ~usPrivacyString : String?
  ~userData : SPUserData
  ~localState : SPJson
  ~propertyId : Int?
  ~gdprChildPmId : String?
  ~ccpaChildPmId : String?
  ~clear()
  ~init(storage:) 
}
class "SPUserDefaults" as SPUserDefaults << (C, DarkSeaGreen) >> { 
  +{static} SP_KEY_PREFIX
  +{static} IAB_KEY_PREFIX
  +{static} US_PRIVACY_STRING_KEY
  ~{static} PROPERTY_ID
  ~{static} LOCAL_STATE_KEY
  ~{static} USER_DATA_KEY
  ~{static} IAB_CMP_SDK_ID_KEY
  ~{static} IAB_CMP_SDK_ID
  ~{static} GDPR_CHILD_PM_ID_KEY
  ~{static} CCPA_CHILD_PM_ID_KEY
  ~storage : Storage
  ~propertyId : Int?
  ~tcfData : [String: Any]?
  ~usPrivacyString : String?
  ~userData : SPUserData
  ~localState : SPJson
  ~gdprChildPmId : String?
  ~ccpaChildPmId : String?
  ~init(storage:)
  ~dictionaryRepresentation()
  ~clear() 
}
class "SPCampaignType" as SPCampaignType << (E, LightSteelBlue) enum >> { 
  +gdpr 
}
class "SPCampaignType" as SPCampaignType31 << (X, Orchid) extension >> { 
  +rawValue : String
  +init(rawValue:)
  +init(from:) 
}
class "SPError" as SPError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +spDescription : String
  +description : String
  +failureReason : String
  +originalError : Error?
  +campaignType : SPCampaignType
  ~init()
  ~init(campaignType:)
  ~init(error:)
  ~init(error:campaignType:)
  ~init(coder:) 
}
class "UnableToFindView" as UnableToFindView << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String
  ~viewId : String
  ~init(withId:)
  ~init(coder:) 
}
class "UnableToLoadJSReceiver" as UnableToLoadJSReceiver << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "WebViewError" as WebViewError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String
  ~errorCode : Int?
  ~title : String?
  ~init(campaignType:code:title:stackTrace:)
  ~init(coder:) 
}
class "InvalidArgumentError" as InvalidArgumentError << (C, DarkSeaGreen) >> { 
  +description : String
  ~message : String
  ~init(message:)
  ~init(coder:) 
}
class "MissingChildPmIdError" as MissingChildPmIdError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String
  ~usedId : String
  ~init(usedId:)
  ~init(coder:) 
}
class "InvalidEventPayloadError" as InvalidEventPayloadError << (C, DarkSeaGreen) >> { 
  +failureReason : String
  +spCode : String
  +description : String
  ~name : String
  ~body : String
  ~init(campaignType:_:body:)
  ~init(coder:) 
}
class "InvalidOnActionEventPayloadError" as InvalidOnActionEventPayloadError << (C, DarkSeaGreen) >> { 
  +spCode : String 
}
class "InvalidURLError" as InvalidURLError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String
  ~urlString : String
  ~init(urlString:)
  ~init(coder:) 
}
class "RenderingAppError" as RenderingAppError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +renderingAppErrorCode : String?
  ~init(campaignType:_:)
  ~init(coder:) 
}
class "UnableToInjectMessageIntoRenderingApp" as UnableToInjectMessageIntoRenderingApp << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseWebMessageError" as InvalidResponseWebMessageError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseGetMessagesEndpointError" as InvalidResponseGetMessagesEndpointError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseMessageGDPREndpointError" as InvalidResponseMessageGDPREndpointError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseMessageCCPAEndpointError" as InvalidResponseMessageCCPAEndpointError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseGDPRPMViewEndpointError" as InvalidResponseGDPRPMViewEndpointError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseCCPAPMViewEndpointError" as InvalidResponseCCPAPMViewEndpointError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseNativeMessageError" as InvalidResponseNativeMessageError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseConsentError" as InvalidResponseConsentError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseCustomError" as InvalidResponseCustomError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "InvalidResponseDeleteCustomError" as InvalidResponseDeleteCustomError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "NoInternetConnection" as NoInternetConnection << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String 
}
class "ConnectionTimeOutError" as ConnectionTimeOutError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String
  ~url : URL?
  ~timeout : TimeInterval?
  ~init(url:timeout:campaignType:)
  ~init(coder:) 
}
class "GenericNetworkError" as GenericNetworkError << (C, DarkSeaGreen) >> { 
  +spCode : String
  +description : String
  ~request : URLRequest
  ~response : HTTPURLResponse?
  ~init(request:response:)
  ~init(coder:) 
}
class "InternalServerError" as InternalServerError << (C, DarkSeaGreen) >> { 
  +spCode : String 
}
class "ResourceNotFoundError" as ResourceNotFoundError << (C, DarkSeaGreen) >> { 
  +spCode : String 
}
class "InvalidRequestError" as InvalidRequestError << (C, DarkSeaGreen) >> { 
  +spCode : String 
}
class "PostingConsentWithoutConsentUUID" as PostingConsentWithoutConsentUUID << (C, DarkSeaGreen) >> { 
  +description : String
  +campaignType : SPCampaignType 
}
class "InvalidConsentStatusQueryParamsError" as InvalidConsentStatusQueryParamsError << (C, DarkSeaGreen) >> { 
  +spCode : String 
}
class "InvalidConsentStatusResponseError" as InvalidConsentStatusResponseError << (C, DarkSeaGreen) >> { 
  +spCode : String 
}
class "SPDateCreated" as SPDateCreated << (S, SkyBlue) struct >> { 
  ~{static} format : DateFormatter
  ~originalDateString : String
  ~date : Date
  ~{static} now()
  -init(date:)
  ~init(from:)
  ~encode(to:) 
}
class "SPLogger" as SPLogger << (P, GoldenRod) protocol >> { 
  ~log(_:)
  ~debug(_:)
  ~error(_:) 
}
class "OSLogger" as OSLogger << (S, SkyBlue) struct >> { 
  ~{static} category
  ~consentLog : OSLog?
  ~log(_:)
  ~debug(_:)
  ~error(_:)
  -osLog(_:_:) 
}
class "SPActionType" as SPActionType << (E, LightSteelBlue) enum >> { 
  +SaveAndExit
  +PMCancel
  +Custom
  +AcceptAll
  +ShowPrivacyManager
  +RejectAll
  +Dismiss
  +RequestATTAccess
  +IDFAAccepted
  +IDFADenied
  +Unknown
  +description : String 
}
class "SPAction" as SPAction << (C, DarkSeaGreen) >> { 
  +type : SPActionType
  +campaignType : SPCampaignType
  +consentLanguage : String?
  +pmURL : URL?
  +pmId : String?
  +pmPayload : SPJson
  +publisherData : SPPublisherData
  +customActionId : String?
  +description : String
  +isEqual(_:)
  +init(type:campaignType:consentLanguage:pmPayload:pmurl:customActionId:) 
}
class "UIColor" as UIColor << (X, Orchid) extension >> { 
  +init(hexString:) 
}
class "WKWebView" as WKWebView << (X, Orchid) extension >> { 
  +setConsentFor(authId:)
  +getAuthId(completionHandler:) 
}
class "SPWebMessageViewController" as SPWebMessageViewController << (C, DarkSeaGreen) >> { 
  ~webviewConfig : WKWebViewConfiguration?
  ~url : URL
  ~contents : Data
  ~webview : WKWebView?
  ~init(url:messageId:contents:campaignType:timeout:delegate:)
  ~init(coder:)
  ~loadView()
  ~keyboardWillHide(notification:)
  ~userContentController(_:didReceive:)
  ~webView(_:decidePolicyFor:decisionHandler:)
  +webView(_:createWebViewWith:for:windowFeatures:)
  ~scrollViewWillBeginZooming(_:with:)
  ~viewForZooming(in:)
  ~webView(_:didFailProvisionalNavigation:withError:) 
}
class "GenericWebMessageViewController" as GenericWebMessageViewController << (C, DarkSeaGreen) >> { 
  ~{static} MESSAGE_HANDLER_NAME
  ~viewWillDisappear(_:)
  ~webviewConfig : WKWebViewConfiguration?
  ~isFirstLayerMessage
  ~loadMessage()
  ~loadPrivacyManager(url:)
  ~closePrivacyManager()
  ~getActionFrom(body:)
  ~handleMessagePreload()
  ~userContentController(_:didReceive:) 
}
class "SPGDPRPartnersViewController" as SPGDPRPartnersViewController << (C, DarkSeaGreen) >> { 
  ~selectedVendorTextLabel : UILabel!
  ~logoImageView : UIImageView!
  ~acceptButton : SPAppleTVButton!
  ~saveAndExit : SPAppleTVButton!
  ~vendorsSlider : UISegmentedControl!
  ~vendorsTableView : UITableView!
  ~header : SPPMHeader!
  ~actionsContainer : UIStackView!
  ~nativeLongButton : SPNativeLongButton?
  ~displayingLegIntVendors : Bool
  ~currentVendors : [GDPRVendor]
  ~consentsSnapshot : GDPRPMConsentSnaptshot
  ~vendors : [GDPRVendor]
  ~userConsentVendors : [GDPRVendor]
  ~legitimateInterestVendorList : [GDPRVendor]
  ~sections : [SPNativeText?]
  ~cellReuseIdentifier
  ~setFocusGuides()
  ~setHeader()
  ~viewDidLoad()
  ~onBackTap(_:)
  ~onVendorSliderTap(_:)
  ~onAcceptTap(_:)
  ~onSaveAndExitTap(_:) 
}
class "SPGDPRPartnersViewController" as SPGDPRPartnersViewController32 << (X, Orchid) extension >> { 
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  +tableView(_:canFocusRowAt:)
  +tableView(_:didSelectRowAt:) 
}
class "ConsentSnapshot" as ConsentSnapshot << (P, GoldenRod) protocol >> { 
  ~toPayload(language:pmId:) 
}
class "GDPRPMConsentSnaptshot" as GDPRPMConsentSnaptshot << (C, DarkSeaGreen) >> { 
  ~onConsentsChange : () -> Void
  ~grants : SPGDPRVendorGrants
  ~vendors : Set<GDPRVendor>
  ~toggledVendorsIds : Set<String>
  ~categories : Set<GDPRCategory>
  ~specialPurposes : Set<GDPRCategory>
  ~features : Set<GDPRCategory>
  ~specialFeatures : Set<GDPRCategory>
  ~toggledCategoriesIds : Set<String>
  ~vendorsWhosePurposesAreOff : [String]
  ~init(grants:vendors:categories:specialPurposes:features:specialFeatures:)
  ~init()
  ~toPayload(language:pmId:)
  ~onCategoryOn(_:)
  ~onCategoryOff(_:)
  ~onVendorOn(_:)
  ~onVendorOff(_:) 
}
class "SPNativePrivacyManagerHome" as SPNativePrivacyManagerHome << (P, GoldenRod) protocol >> { 
  ~delegate : SPNativePMDelegate? 
}
class "SPGDPRNativePrivacyManagerViewController" as SPGDPRNativePrivacyManagerViewController << (C, DarkSeaGreen) >> { 
  ~delegate : SPNativePMDelegate?
  ~categoriesExplainerLabel : UILabel!
  ~descriptionTextView : SPFocusableTextView!
  ~logoImageView : UIImageView!
  ~ourPartners : SPAppleTVButton!
  ~managePreferenceButton : SPAppleTVButton!
  ~acceptButton : SPAppleTVButton!
  ~rejectButton : SPAppleTVButton!
  ~saveAndExitButton : SPAppleTVButton!
  ~privacyPolicyButton : SPAppleTVButton!
  ~categoryTableView : UITableView!
  ~header : SPPMHeader!
  ~buttonsStack : UIStackView!
  ~secondLayerData : GDPRPrivacyManagerViewResponse?
  ~categories : [GDPRCategory]
  ~vendorGrants : SPGDPRVendorGrants?
  ~cellReuseIdentifier
  ~snapshot : GDPRPMConsentSnaptshot?
  ~preferredFocusedView : UIView?
  ~setHeader()
  ~loadMessage()
  ~viewDidLoad()
  ~setFocusGuides()
  ~setFocusGuidesForButtons()
  ~disableMenuButton()
  ~menuButtonAction()
  ~onAcceptTap(_:)
  ~onRejectTap(_:)
  ~onSaveAndExitTap(_:)
  ~onManagePreferenceTap(_:)
  ~onPartnersTap(_:)
  ~onPrivacyPolicyTap(_:) 
}
class "SPGDPRNativePrivacyManagerViewController" as SPGDPRNativePrivacyManagerViewController33 << (X, Orchid) extension >> { 
  loaded(_:)
  loaded(_:)
  action(_:from:)
  onError(_:)
  finished(_:) 
}
class "SPGDPRNativePrivacyManagerViewController" as SPGDPRNativePrivacyManagerViewController34 << (X, Orchid) extension >> { 
  tableView(_:heightForHeaderInSection:)
  tableView(_:viewForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:) 
}
class "SPGDPRNativePrivacyManagerViewController" as SPGDPRNativePrivacyManagerViewController35 << (X, Orchid) extension >> { 
  tableView(_:canFocusRowAt:)
  tableView(_:shouldUpdateFocusIn:) 
}
class "FocusableScrollView" as FocusableScrollView << (C, DarkSeaGreen) >> { 
  ~canBecomeFocused : Bool 
}
class "SPGDPRManagePreferenceViewController" as SPGDPRManagePreferenceViewController << (C, DarkSeaGreen) >> { 
  ~descriptionTextView : UITextView!
  ~logoImageView : UIImageView!
  ~acceptButton : SPAppleTVButton!
  ~saveAndExit : SPAppleTVButton!
  ~categorySlider : UISegmentedControl!
  ~categoriesTableView : UITableView!
  ~header : SPPMHeader!
  ~actionsContainer : UIStackView!
  ~nativeLongButton : SPNativeLongButton?
  ~consentsSnapshot : GDPRPMConsentSnaptshot
  ~displayingLegIntCategories : Bool
  ~categories : [GDPRCategory]
  ~userConsentCategories : [GDPRCategory]
  ~legIntCategories : [GDPRCategory]
  ~sections : [Section]
  ~cellReuseIdentifier
  ~setFocusGuides()
  ~setHeader()
  ~viewDidLoad()
  ~onCategorySliderTap(_:)
  ~onAcceptTap(_:)
  ~onSaveAndExitTap(_:) 
}
class "SPGDPRManagePreferenceViewController" as SPGDPRManagePreferenceViewController36 << (X, Orchid) extension >> { 
  currentCategory(_:)
  tableView(_:estimatedHeightForHeaderInSection:)
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  tableView(_:shouldHighlightRowAt:)
  +tableView(_:canFocusRowAt:)
  tableView(_:willSelectRowAt:)
  tableView(_:didSelectRowAt:) 
}
class "SPGDPRCategoryDetailsViewController" as SPGDPRCategoryDetailsViewController << (C, DarkSeaGreen) >> { 
  ~header : SPPMHeader!
  ~descriptionTextView : UITextView!
  ~logoImageView : UIImageView!
  ~onButton : SPAppleTVButton!
  ~offButton : SPAppleTVButton!
  ~actionsContainer : UIStackView!
  ~categoryDetailsTableView : UITableView!
  ~categoryManagerDelegate : GDPRPMConsentSnaptshot?
  ~category : GDPRCategory?
  ~partners : [String]
  ~sections : [SPNativeText?]
  ~cellReuseIdentifier
  ~setHeader()
  ~setFocusGuides()
  ~viewDidLoad()
  ~onBackTap(_:)
  ~onOnButtonTap(_:)
  ~onOffButtonTap(_:) 
}
class "SPGDPRCategoryDetailsViewController" as SPGDPRCategoryDetailsViewController37 << (X, Orchid) extension >> { 
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  +tableView(_:canFocusRowAt:) 
}
class "SPGDPRVendorDetailsViewController" as SPGDPRVendorDetailsViewController << (C, DarkSeaGreen) >> { 
  ~headerView : SPPMHeader!
  ~qrCodeImageView : UIImageView!
  ~descriptionTextView : UITextView!
  ~onButton : SPAppleTVButton!
  ~offButton : SPAppleTVButton!
  ~vendorDetailsTableView : UITableView!
  ~actionsContainer : UIStackView!
  ~vendorManagerDelegate : GDPRPMConsentSnaptshot?
  ~cellReuseIdentifier
  ~vendor : GDPRVendor?
  ~sections : [Section]
  ~setHeader()
  ~setFocusGuides()
  ~viewDidLoad()
  ~onOnButtonTap(_:)
  ~onOffButtonTap(_:) 
}
class "SPGDPRVendorDetailsViewController" as SPGDPRVendorDetailsViewController38 << (X, Orchid) extension >> { 
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  +tableView(_:canFocusRowAt:) 
}
class "SPPrivacyPolicyViewController" as SPPrivacyPolicyViewController << (C, DarkSeaGreen) >> { 
  ~descriptionTextView : UITextView!
  ~logoImageView : UIImageView!
  ~closeButton : SPAppleTVButton!
  ~header : SPPMHeader!
  ~setHeader()
  +viewDidLoad()
  ~onCloseTap(_:) 
}
class "UIImageView" as UIImageView << (X, Orchid) extension >> { 
  load(url:) 
}
class "SPUIRectEdge" as SPUIRectEdge << (E, LightSteelBlue) enum >> { 
  ~bottomTop
  ~init(from:) 
}
class "UIFont" as UIFont << (X, Orchid) extension >> { 
  init(from:) 
}
class "UIViewController" as UIViewController << (X, Orchid) extension >> { 
  addFocusGuide(from:to:direction:debug:)
  addFocusGuide(from:to:direction:debug:) 
}
class "FocusGuideDebugView" as FocusGuideDebugView << (C, DarkSeaGreen) >> { 
  ~init(focusGuide:)
  ~init(coder:) 
}
class "SPNativeScreenViewController" as SPNativeScreenViewController << (C, DarkSeaGreen) >> { 
  ~components : [SPNativeUI]
  ~viewData : SPNativeView
  ~pmData : PrivacyManagerViewData
  ~setFocusGuides()
  ~init(messageId:campaignType:viewData:pmData:delegate:nibName:)
  ~init(coder:)
  ~viewDidLoad()
  ~loadImage(forComponentId:imageView:)
  ~loadButton(forComponentId:button:)
  ~loadLabelView(forComponentId:label:)
  ~loadLabelText(forComponentId:labelText:label:)
  ~loadTextView(forComponentId:textView:text:bounces:)
  ~loadSliderButton(forComponentId:slider:) 
}
class "UILabel" as UILabel << (X, Orchid) extension >> { 
  setDefaultTextColorForDarkMode() 
}
class "SPFocusableTextView" as SPFocusableTextView << (C, DarkSeaGreen) >> { 
  ~canBecomeFocused : Bool
  ~isContentBig : Bool
  +contentFitsContainer : Bool
  +didUpdateFocus(in:with:)
  ~init(coder:)
  ~scrollViewDidScroll(_:)
  ~scrollViewWillEndDragging(_:withVelocity:targetContentOffset:)
  ~updateContentFitsContainer() 
}
class "UILabel" as UILabel39 << (X, Orchid) extension >> { 
  setup(from:) 
}
class "UIButton" as UIButton << (X, Orchid) extension >> { 
  setup(from:) 
}
class "SPPMHeader" as SPPMHeader << (C, DarkSeaGreen) >> { 
  ~contentView : UIView!
  ~titleLabel : UILabel!
  ~backButton : UIButton!
  ~onBackButtonPressed(_:)
  ~spBackButton : SPNativeButton?
  ~spTitleText : SPNativeText?
  ~onBackButtonTapped : (() -> Void)?
  ~init(coder:)
  ~init(frame:)
  ~loadSubViews() 
}
class "UIView" as UIView << (X, Orchid) extension >> { 
  allSubviews : [UIView] 
}
class "SPAppleTVButton" as SPAppleTVButton << (C, DarkSeaGreen) >> { 
  ~viewBeforeUITitleView : UIView?
  ~onFocusBackgroundColor : UIColor?
  ~onUnfocusBackgroundColor : UIColor?
  ~didUpdateFocus(in:with:) 
}
class "LongButtonViewCell" as LongButtonViewCell << (C, DarkSeaGreen) >> { 
  ~labelText : String?
  ~isOn : Bool?
  ~isCustom : Bool
  ~onText : String?
  ~offText : String?
  ~customText : String?
  ~selectable : Bool
  ~label : UILabel!
  ~customLabel : UILabel!
  ~stateLabel : UILabel!
  ~setup(from:)
  ~loadUI()
  ~prepareForReuse()
  ~awakeFromNib() 
}
class "QRCode" as QRCode << (C, DarkSeaGreen) >> { 
  ~init(from:scale:) 
}
class "SPCCPAVendorDetailsViewController" as SPCCPAVendorDetailsViewController << (C, DarkSeaGreen) >> { 
  ~headerView : SPPMHeader!
  ~qrCodeImageView : UIImageView!
  ~descriptionTextView : UITextView!
  ~onButton : SPAppleTVButton!
  ~offButton : SPAppleTVButton!
  ~vendorDetailsTableView : UITableView!
  ~actionsContainer : UIStackView!
  ~vendorManagerDelegate : CCPAPMConsentSnaptshot?
  ~cellReuseIdentifier
  ~vendor : CCPAVendor?
  ~sections : [Section]
  ~setHeader()
  ~setFocusGuides()
  ~viewDidLoad()
  ~onOnButtonTap(_:)
  ~onOffButtonTap(_:) 
}
class "SPCCPAVendorDetailsViewController" as SPCCPAVendorDetailsViewController40 << (X, Orchid) extension >> { 
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  +tableView(_:canFocusRowAt:) 
}
class "SPCCPACategoryDetailsViewController" as SPCCPACategoryDetailsViewController << (C, DarkSeaGreen) >> { 
  ~header : SPPMHeader!
  ~descriptionTextView : UITextView!
  ~logoImageView : UIImageView!
  ~onButton : SPAppleTVButton!
  ~offButton : SPAppleTVButton!
  ~actionsContainer : UIStackView!
  ~categoryDetailsTableView : UITableView!
  ~categoryManagerDelegate : CCPAPMConsentSnaptshot?
  ~category : CCPACategory?
  ~partners : [String]
  ~sections : [SPNativeText?]
  ~cellReuseIdentifier
  ~setHeader()
  ~setFocusGuides()
  ~viewDidLoad()
  ~onBackTap(_:)
  ~onOnButtonTap(_:)
  ~onOffButtonTap(_:) 
}
class "SPCCPACategoryDetailsViewController" as SPCCPACategoryDetailsViewController41 << (X, Orchid) extension >> { 
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  +tableView(_:canFocusRowAt:) 
}
class "SPCCPANativePrivacyManagerViewController" as SPCCPANativePrivacyManagerViewController << (C, DarkSeaGreen) >> { 
  ~delegate : SPNativePMDelegate?
  ~descriptionTextView : SPFocusableTextView!
  ~logoImageView : UIImageView!
  ~ourPartners : SPAppleTVButton!
  ~managePreferenceButton : SPAppleTVButton!
  ~acceptButton : SPAppleTVButton!
  ~rejectButton : SPAppleTVButton!
  ~saveAndExitButton : SPAppleTVButton!
  ~privacyPolicyButton : SPAppleTVButton!
  ~doNotSellTableView : UITableView!
  ~actionsContainer : UIStackView!
  ~doNotSellButton : SPNativeLongButton?
  ~header : SPPMHeader!
  ~secondLayerData : CCPAPrivacyManagerViewResponse?
  ~cellReuseIdentifier
  ~snapshot : CCPAPMConsentSnaptshot?
  ~preferredFocusedView : UIView?
  ~setFocusGuides()
  ~setHeader()
  ~loadMessage()
  ~viewDidLoad()
  ~disableMenuButton()
  ~menuButtonAction()
  ~setFocusGuidesForButtons()
  ~onAcceptTap(_:)
  ~onRejectTap(_:)
  ~onSaveAndExitTap(_:)
  ~onManagePreferenceTap(_:)
  ~onPartnersTap(_:)
  ~onPrivacyPolicyTap(_:) 
}
class "SPCCPANativePrivacyManagerViewController" as SPCCPANativePrivacyManagerViewController42 << (X, Orchid) extension >> { 
  loaded(_:)
  action(_:from:)
  onError(_:)
  finished(_:) 
}
class "SPCCPANativePrivacyManagerViewController" as SPCCPANativePrivacyManagerViewController43 << (X, Orchid) extension >> { 
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:) 
}
class "SPCCPANativePrivacyManagerViewController" as SPCCPANativePrivacyManagerViewController44 << (X, Orchid) extension >> { 
  tableView(_:canFocusRowAt:)
  tableView(_:shouldUpdateFocusIn:)
  tableView(_:didSelectRowAt:) 
}
class "CCPAPMConsentSnaptshot" as CCPAPMConsentSnaptshot << (C, DarkSeaGreen) >> { 
  ~onConsentsChange : () -> Void
  ~vendors : Set<VendorType>
  ~categories : Set<CategoryType>
  ~toggledVendorsIds : Set<String>
  ~toggledCategoriesIds : Set<String>
  ~consentStatus : CCPAConsentStatus
  ~init(vendors:categories:rejectedVendors:rejectedCategories:consentStatus:)
  ~init()
  ~init(withStatus:)
  ~toPayload(language:pmId:)
  ~onCategoryOn(_:)
  ~onCategoryOff(_:)
  ~onVendorOn(_:)
  ~onVendorOff(_:)
  ~onDoNotSellToggle() 
}
class "SPCCPAPartnersViewController" as SPCCPAPartnersViewController << (C, DarkSeaGreen) >> { 
  ~selectedVendorTextLabel : UILabel!
  ~logoImageView : UIImageView!
  ~acceptButton : SPAppleTVButton!
  ~saveAndExit : SPAppleTVButton!
  ~vendorsTableView : UITableView!
  ~header : SPPMHeader!
  ~actionsContainer : UIStackView!
  ~nativeLongButton : SPNativeLongButton?
  ~consentsSnapshot : CCPAPMConsentSnaptshot
  ~vendors : [CCPAVendor]
  ~sections : [SPNativeText?]
  ~cellReuseIdentifier
  ~setFocusGuides()
  ~setHeader()
  ~viewDidLoad()
  ~onBackTap(_:)
  ~onAcceptTap(_:)
  ~onSaveAndExitTap(_:) 
}
class "SPCCPAPartnersViewController" as SPCCPAPartnersViewController45 << (X, Orchid) extension >> { 
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  +tableView(_:canFocusRowAt:)
  +tableView(_:didSelectRowAt:) 
}
class "SPCCPAManagePreferenceViewController" as SPCCPAManagePreferenceViewController << (C, DarkSeaGreen) >> { 
  ~descriptionTextView : UITextView!
  ~logoImageView : UIImageView!
  ~acceptButton : SPAppleTVButton!
  ~saveAndExit : SPAppleTVButton!
  ~categoriesTableView : UITableView!
  ~header : SPPMHeader!
  ~actionsContainer : UIStackView!
  ~nativeLongButton : SPNativeLongButton?
  ~consentsSnapshot : CCPAPMConsentSnaptshot
  ~categories : [CCPACategory]
  ~userConsentCategories : [CCPACategory]
  ~legIntCategories : [CCPACategory]
  ~sections : [Section]
  ~cellReuseIdentifier
  ~setFocusGuides()
  ~setHeader()
  ~viewDidLoad()
  ~onAcceptTap(_:)
  ~onSaveAndExitTap(_:) 
}
class "SPCCPAManagePreferenceViewController" as SPCCPAManagePreferenceViewController46 << (X, Orchid) extension >> { 
  currentCategory(_:)
  tableView(_:estimatedHeightForHeaderInSection:)
  numberOfSections(in:)
  tableView(_:viewForHeaderInSection:)
  tableView(_:heightForHeaderInSection:)
  +tableView(_:numberOfRowsInSection:)
  +tableView(_:heightForRowAt:)
  +tableView(_:cellForRowAt:)
  tableView(_:shouldHighlightRowAt:)
  +tableView(_:canFocusRowAt:)
  tableView(_:willSelectRowAt:)
  tableView(_:didSelectRowAt:) 
}
class "PMCategoryManager" as PMCategoryManager << (P, GoldenRod) protocol >> { 
  ~onConsentsChange : () -> Void
  ~categories : Set<CategoryType>
  ~toggledCategoriesIds : Set<String>
  ~onCategoryOn(_:)
  ~onCategoryOff(_:) 
}
class "JSONAble" as JSONAble << (P, GoldenRod) protocol >> { 
  ~json() 
}
class "GDPRPMPayload" as GDPRPMPayload << (S, SkyBlue) struct >> { 
  ~lan : SPMessageLanguage
  ~privacyManagerId : String
  ~categories : [Category]
  ~vendors : [Vendor]
  ~specialFeatures : [Feature]
  ~json() 
}
class "CCPAPMPayload" as CCPAPMPayload << (S, SkyBlue) struct >> { 
  ~lan : SPMessageLanguage
  ~privacyManagerId : String
  ~rejectedCategories : [String]
  ~rejectedVendors : [String]
  ~json() 
}
class "PMVendorManager" as PMVendorManager << (P, GoldenRod) protocol >> { 
  ~onConsentsChange : () -> Void
  ~vendors : Set<VendorType>
  ~toggledVendorsIds : Set<String>
  ~onVendorOn(_:)
  ~onVendorOff(_:) 
}
class "SPRenderingApp" as SPRenderingApp << (P, GoldenRod) protocol >> { 
  +loadMessage()
  +loadPrivacyManager(url:)
  +closePrivacyManager() 
}
class "RenderingAppEvents" as RenderingAppEvents << (E, LightSteelBlue) enum >> { 
  ~readyForPreload
  ~unknown(_:) 
}
class "RenderingAppEvents" as RenderingAppEvents47 << (X, Orchid) extension >> {  
}
class "RenderingAppEvents" as RenderingAppEvents48 << (X, Orchid) extension >> { 
  init(rawValue:)
  rawValue : String 
}
class "RenderingAppEvents" as RenderingAppEvents49 << (X, Orchid) extension >> { 
  init(stringLiteral:) 
}
class "MessageController" as MessageController << (P, GoldenRod) protocol >> { 
  +loadMessage()
  +loadPrivacyManager(url:)
  +closePrivacyManager() 
}
class "SPMessageView" as SPMessageView << (P, GoldenRod) protocol >> { 
  +messageUIDelegate : SPMessageUIDelegate?
  +campaignType : SPCampaignType
  +messageId : String
  +timeout : TimeInterval 
}
class "SPMessageViewController" as SPMessageViewController << (C, DarkSeaGreen) >> { 
  +messageUIDelegate : SPMessageUIDelegate?
  +campaignType : SPCampaignType
  +messageId : String
  +timeout : TimeInterval
  ~init(messageId:campaignType:timeout:delegate:nibName:)
  ~init(coder:)
  +loadMessage()
  +loadPrivacyManager(url:)
  +closePrivacyManager() 
}
class "SPJson" as SPJson50 << (E, LightSteelBlue) enum >> { 
  +description : String
  +string(_:)
  +number(_:)
  +object(_:)
  +array(_:)
  +bool(_:)
  +null
  +init()
  ~init(_:)
  +init(from:)
  +encode(to:)
  +objectValue : [String: SPJson]?
  +arrayValue : [SPJson]?
  +stringValue : String?
  +nullValue : Any?
  +doubleValue : Double?
  +intValue : Int?
  +boolValue : Bool?
  +anyValue : Any?
  +dictionaryValue : [String: Any]? 
}
class "SPJson" as SPJson51 << (X, Orchid) extension >> { 
  +init(_:) 
}
Int -- SPIDFAStatus : inherits
CaseIterable -- SPIDFAStatus : inherits
CustomStringConvertible -- SPIDFAStatus : inherits
Codable -- SPIDFAStatus : inherits
Connectivity <|.. ConnectivityManager : confirms to
NSObject <|-- SPConsentManager : inherits
SPSDK <|-- SPConsentManager : inherits
SPMessageUIDelegate <|-- SPConsentManager : inherits
AnyObject <|.. SPNativePMDelegate : inherits
SPNativePMDelegate <|.. SPConsentManager : confirms to
Int -- SPMessageLanguage : inherits
Codable -- SPMessageLanguage : inherits
Int -- SPCampaignEnv : inherits
Codable -- SPCampaignEnv : inherits
QueryParamEncodable <|-- ConsentStatusMetaData : inherits
Codable <|-- AppleTrackingPayload : inherits
Codable <|-- IDFAStatusReportRequest : inherits
Codable <|-- DeleteCustomConsentResponse : inherits
Equatable <|-- DeleteCustomConsentResponse : inherits
Codable <|-- DeleteCustomConsentRequest : inherits
Equatable <|-- DeleteCustomConsentRequest : inherits
Encodable <|-- CampaignRequest : inherits
Equatable <|-- CampaignRequest : inherits
Equatable <|-- CampaignsRequest : inherits
Encodable <|-- CampaignsRequest : inherits
Equatable <|-- MessageRequest : inherits
Encodable <|-- MessageRequest : inherits
Encodable <|-- GDPRConsentRequest : inherits
Equatable <|-- GDPRConsentRequest : inherits
Encodable <|-- CCPAConsentRequest : inherits
Equatable <|-- CCPAConsentRequest : inherits
Decodable & Equatable <|-- ConsentResponse : inherits
Decodable & CaseIterable & RawRepresentable <|.. Defaultable : inherits
Int -- MessageCategory : inherits
Codable -- MessageCategory : inherits
Defaultable <|.. MessageCategory : confirms to
Equatable -- MessageCategory : inherits
Int -- MessageSubCategory : inherits
Decodable -- MessageSubCategory : inherits
Defaultable <|.. MessageSubCategory : confirms to
Equatable -- MessageSubCategory : inherits
Codable <|-- Message : inherits
Equatable <|-- Message : inherits
Equatable -- MessageJson : inherits
Codable -- MessageJson : inherits
Equatable -- Consent : inherits
Codable -- Consent : inherits
Equatable <|-- MessageMetaData : inherits
Decodable <|-- MessageMetaData : inherits
Equatable <|-- Campaign : inherits
Decodable <|-- Campaign : inherits
Decodable <|-- MessagesResponse : inherits
Equatable <|-- MessagesResponse : inherits
Equatable <|-- MessageResponse : inherits
Decodable <|-- MessageResponse : inherits
Encodable <|.. QueryParamEncodable : inherits
QueryParamEncodable <|.. MessagesRequest : confirms to
Equatable <|-- ErrorMetricsRequest : inherits
Codable <|-- ErrorMetricsRequest : inherits
Codable <|-- CustomConsentResponse : inherits
Equatable <|-- CustomConsentResponse : inherits
Codable <|-- CustomConsentRequest : inherits
Equatable <|-- CustomConsentRequest : inherits
Decodable <|-- GDPRVendor : inherits
Identifiable <|-- GDPRVendor : inherits
Equatable <|-- GDPRVendor : inherits
Hashable <|-- GDPRVendor : inherits
Decodable -- PrivacyManagerViewResponse : inherits
Decodable <|-- GDPRPrivacyManagerViewResponse : inherits
Hashable <|-- CCPAVendor : inherits
Decodable <|-- CCPAVendor : inherits
Decodable <|-- CCPACategory : inherits
Hashable <|-- CCPACategory : inherits
Decodable <|-- CCPAPrivacyManagerViewResponse : inherits
Decodable <|-- ConsentStatusResponse : inherits
Equatable <|-- ConsentStatusResponse : inherits
Equatable <|-- PrivacyManagerViewData : inherits
Decodable <|-- PrivacyManagerViewData : inherits
NSObject <|-- SPNativeFont : inherits
Codable <|-- SPNativeFont : inherits
NSObject <|-- SPNativeStyle : inherits
Codable <|-- SPNativeStyle : inherits
Int -- SPNativeUIType : inherits
Equatable -- SPNativeUIType : inherits
Decodable -- SPNativeUIType : inherits
NSObject <|-- SPNativeUISettings : inherits
Decodable <|-- SPNativeUISettings : inherits
SPNativeUISettings <|-- SPNativeUISettingsText : inherits
NSObject <|-- SPNativeUI : inherits
Decodable <|-- SPNativeUI : inherits
SPNativeUI <|-- SPNativeView : inherits
SPNativeUI <|-- SPNativeText : inherits
SPNativeUI <|-- SPNativeButton : inherits
SPNativeUI <|-- SPNativeImage : inherits
SPNativeUI <|-- SPNativeLongButton : inherits
SPNativeUI <|-- SPNativeSlider : inherits
Codable <|-- GDPRCategory : inherits
Identifiable <|-- GDPRCategory : inherits
Hashable <|-- GDPRCategory : inherits
Equatable <|-- GDPRCategory : inherits
Codable <.. GDPRCategory.CategoryType : inherits
SPURLSession <|.. URLSession : confirms to
SPURLSessionDataTask <|.. URLSessionDataTask : confirms to
SPDispatchQueue <|.. DispatchQueue : confirms to
HttpClient <|.. SimpleClient : confirms to
SourcePointProtocol <|.. SourcePointClient : confirms to
QueryParamEncodable <|.. SPJson : confirms to
Codable <|-- ConsentStatus : inherits
Equatable <|-- ConsentStatus : inherits
Int -- CCPAConsentStatus : inherits
Codable -- CCPAConsentStatus : inherits
NSObject <|-- SPCCPAConsent : inherits
Codable <|-- SPCCPAConsent : inherits
NSObject <|-- SPGDPRVendorGrant : inherits
Codable <|-- SPGDPRVendorGrant : inherits
NSObject <|-- SPGDPRConsent : inherits
Codable <|-- SPGDPRConsent : inherits
NSObject <|-- SPConsent : inherits
Codable <|-- SPConsent : inherits
NSObject <|-- SPUserData : inherits
Codable <|-- SPUserData : inherits
SPObjcUserData <|.. SPUserData : confirms to
Int -- SPPrivacyManagerTab : inherits
NSObject <|-- SPCampaign : inherits
NSObject <|-- SPCampaigns : inherits
NSObject <|-- SPPropertyName : inherits
Codable <|-- SPPropertyName : inherits
Codable <|-- SPStringifiedJSON : inherits
Collection <|-- SPStringifiedJSON : inherits
SPConsentUIDelegate <|.. SPDelegate : confirms to
SPConsentDelegate <|.. SPDelegate : confirms to
NSObject <|-- SPNativeMessage : ext
Decodable <|-- SPNativeMessage : inherits
SPMessageView <|-- SPNativeMessage : inherits
SPDeviceManager <|.. SPDevice : confirms to
SPGDPR <|.. SPSDK : confirms to
SPCCPA <|.. SPSDK : confirms to
SPMessageUIDelegate <|.. SPSDK : confirms to
Storage <|.. UserDefaults : confirms to
SPLocalStorage <|.. SPUserDefaults : confirms to
Int -- SPCampaignType : inherits
Equatable -- SPCampaignType : inherits
Codable -- SPCampaignType : inherits
NSError <|-- SPError : inherits
LocalizedError <|-- SPError : inherits
SPError <|-- UnableToFindView : inherits
SPError <|-- UnableToLoadJSReceiver : inherits
SPError <|-- WebViewError : inherits
SPError <|-- InvalidArgumentError : inherits
SPError <|-- MissingChildPmIdError : inherits
SPError <|-- InvalidEventPayloadError : inherits
InvalidEventPayloadError <|-- InvalidOnActionEventPayloadError : inherits
SPError <|-- InvalidURLError : inherits
SPError <|-- RenderingAppError : inherits
SPError <|-- UnableToInjectMessageIntoRenderingApp : inherits
SPError <|-- InvalidResponseWebMessageError : inherits
SPError <|-- InvalidResponseGetMessagesEndpointError : inherits
SPError <|-- InvalidResponseMessageGDPREndpointError : inherits
SPError <|-- InvalidResponseMessageCCPAEndpointError : inherits
SPError <|-- InvalidResponseGDPRPMViewEndpointError : inherits
SPError <|-- InvalidResponseCCPAPMViewEndpointError : inherits
SPError <|-- InvalidResponseNativeMessageError : inherits
SPError <|-- InvalidResponseConsentError : inherits
SPError <|-- InvalidResponseCustomError : inherits
SPError <|-- InvalidResponseDeleteCustomError : inherits
SPError <|-- NoInternetConnection : inherits
SPError <|-- ConnectionTimeOutError : inherits
SPError <|-- GenericNetworkError : inherits
GenericNetworkError <|-- InternalServerError : inherits
GenericNetworkError <|-- ResourceNotFoundError : inherits
SPError <|-- InvalidRequestError : inherits
InvalidRequestError <|-- PostingConsentWithoutConsentUUID : inherits
SPError <|-- InvalidConsentStatusQueryParamsError : inherits
SPError <|-- InvalidConsentStatusResponseError : inherits
Codable <|-- SPDateCreated : inherits
Equatable <|-- SPDateCreated : inherits
SPLogger <|.. OSLogger : confirms to
Int -- SPActionType : inherits
Codable -- SPActionType : inherits
CaseIterable -- SPActionType : inherits
CustomStringConvertible -- SPActionType : inherits
NSObject <|-- SPAction : ext
SPMessageViewController <|-- SPWebMessageViewController : inherits
WKUIDelegate <|-- SPWebMessageViewController : inherits
WKNavigationDelegate <|-- SPWebMessageViewController : inherits
WKScriptMessageHandler <|-- SPWebMessageViewController : inherits
UIScrollViewDelegate <|-- SPWebMessageViewController : inherits
SPWebMessageViewController <|-- GenericWebMessageViewController : inherits
SPNativeScreenViewController <|-- SPGDPRPartnersViewController : inherits
UITableViewDataSource <|-- SPGDPRPartnersViewController : inherits
UITableViewDelegate <|-- SPGDPRPartnersViewController : inherits
NSObject <|-- GDPRPMConsentSnaptshot : ext
ConsentSnapshot <|.. GDPRPMConsentSnaptshot : confirms to
PMVendorManager <|-- GDPRPMConsentSnaptshot : inherits
PMCategoryManager <|-- GDPRPMConsentSnaptshot : inherits
SPNativeScreenViewController <|-- SPGDPRNativePrivacyManagerViewController : inherits
SPNativePrivacyManagerHome <|.. SPGDPRNativePrivacyManagerViewController : confirms to
SPMessageUIDelegate <|.. SPGDPRNativePrivacyManagerViewController : confirms to
UITableViewDataSource <|-- SPGDPRNativePrivacyManagerViewController : inherits
UITableViewDelegate <|-- SPGDPRNativePrivacyManagerViewController : inherits
UIScrollView <|-- FocusableScrollView : inherits
SPNativeScreenViewController <|-- SPGDPRManagePreferenceViewController : inherits
UITableViewDataSource <|-- SPGDPRManagePreferenceViewController : inherits
UITableViewDelegate <|-- SPGDPRManagePreferenceViewController : inherits
SPNativeScreenViewController <|-- SPGDPRCategoryDetailsViewController : inherits
UITableViewDataSource <|-- SPGDPRCategoryDetailsViewController : inherits
UITableViewDelegate <|-- SPGDPRCategoryDetailsViewController : inherits
SPNativeScreenViewController <|-- SPGDPRVendorDetailsViewController : inherits
UITableViewDataSource <|-- SPGDPRVendorDetailsViewController : inherits
UITableViewDelegate <|-- SPGDPRVendorDetailsViewController : inherits
SPNativeScreenViewController <|-- SPPrivacyPolicyViewController : inherits
UIView <|-- FocusGuideDebugView : inherits
SPMessageViewController <|-- SPNativeScreenViewController : inherits
UITextView <|-- SPFocusableTextView : inherits
UITextViewDelegate <|-- SPFocusableTextView : inherits
UIView <|-- SPPMHeader : inherits
UIButton <|-- SPAppleTVButton : ext
UITableViewCell <|-- LongButtonViewCell : inherits
UIImage <|-- QRCode : inherits
SPNativeScreenViewController <|-- SPCCPAVendorDetailsViewController : inherits
UITableViewDataSource <|-- SPCCPAVendorDetailsViewController : inherits
UITableViewDelegate <|-- SPCCPAVendorDetailsViewController : inherits
SPNativeScreenViewController <|-- SPCCPACategoryDetailsViewController : inherits
UITableViewDataSource <|-- SPCCPACategoryDetailsViewController : inherits
UITableViewDelegate <|-- SPCCPACategoryDetailsViewController : inherits
SPNativeScreenViewController <|-- SPCCPANativePrivacyManagerViewController : inherits
SPNativePrivacyManagerHome <|.. SPCCPANativePrivacyManagerViewController : confirms to
SPMessageUIDelegate <|.. SPCCPANativePrivacyManagerViewController : confirms to
UITableViewDataSource <|-- SPCCPANativePrivacyManagerViewController : inherits
UITableViewDelegate <|-- SPCCPANativePrivacyManagerViewController : inherits
NSObject <|-- CCPAPMConsentSnaptshot : ext
ConsentSnapshot <|.. CCPAPMConsentSnaptshot : confirms to
PMVendorManager <|-- CCPAPMConsentSnaptshot : inherits
PMCategoryManager <|-- CCPAPMConsentSnaptshot : inherits
SPNativeScreenViewController <|-- SPCCPAPartnersViewController : inherits
UITableViewDataSource <|-- SPCCPAPartnersViewController : inherits
UITableViewDelegate <|-- SPCCPAPartnersViewController : inherits
SPNativeScreenViewController <|-- SPCCPAManagePreferenceViewController : inherits
UITableViewDataSource <|-- SPCCPAManagePreferenceViewController : inherits
UITableViewDelegate <|-- SPCCPAManagePreferenceViewController : inherits
AnyObject <|.. PMCategoryManager : inherits
Codable <|-- GDPRPMPayload : inherits
JSONAble <|.. GDPRPMPayload : confirms to
Codable <|-- CCPAPMPayload : inherits
JSONAble <|.. CCPAPMPayload : confirms to
AnyObject <|.. PMVendorManager : inherits
Equatable -- RenderingAppEvents : inherits
RawRepresentable -- RenderingAppEvents : inherits
ExpressibleByStringLiteral -- RenderingAppEvents : inherits
SPRenderingApp <|.. SPMessageView : confirms to
MessageController <|.. SPMessageView : confirms to
UIViewController <|-- SPMessageViewController : ext
SPMessageView <|.. SPMessageViewController : confirms to
Codable <.. SPJson : inherits
CustomStringConvertible <.. SPJson : inherits
Equatable <.. SPJson : inherits
SPIDFAStatus <.. SPIDFAStatus0 : ext
SPConsentManager <.. SPConsentManager1 : ext
SPConsentManager <.. SPConsentManager2 : ext
SPConsentManager <.. SPConsentManager3 : ext
SPCampaignEnv <.. SPCampaignEnv4 : ext
IDFAStatusReportRequest <.. IDFAStatusReportRequest5 : ext
CampaignsRequest <.. CampaignsRequest6 : ext
Defaultable <.. Defaultable7 : ext
MessageJson <.. MessageJson8 : ext
Consent <.. Consent9 : ext
MessageMetaData <.. MessageMetaData10 : ext
Campaign <.. Campaign11 : ext
MessageResponse <.. MessageResponse12 : ext
MessagesResponse <.. MessagesResponse13 : ext
Message <.. Message14 : ext
QueryParamEncodable <.. QueryParamEncodable15 : ext
ErrorMetricsRequest <.. ErrorMetricsRequest16 : ext
GDPRVendor <.. GDPRVendor17 : ext
PrivacyManagerViewResponse <.. PrivacyManagerViewResponse18 : ext
CCPAVendor <.. CCPAVendor19 : ext
PrivacyManagerViewData <.. PrivacyManagerViewData20 : ext
PrivacyManagerViewData <.. PrivacyManagerViewData21 : ext
SPNativeUIType <.. SPNativeUIType22 : ext
GDPRCategory <.. GDPRCategory23 : ext
SourcePointClient <.. SourcePointClient24 : ext
ConsentStatus <.. ConsentStatus25 : ext
SPConsent <.. SPConsent26 : ext
SPUserData <.. SPUserData27 : ext
SPUserData <.. SPUserData28 : ext
SPStringifiedJSON <.. SPStringifiedJSON29 : ext
SPSDK <.. SPSDK30 : ext
SPCampaignType <.. SPCampaignType31 : ext
SPGDPRPartnersViewController <.. SPGDPRPartnersViewController32 : ext
SPGDPRNativePrivacyManagerViewController <.. SPGDPRNativePrivacyManagerViewController33 : ext
SPGDPRNativePrivacyManagerViewController <.. SPGDPRNativePrivacyManagerViewController34 : ext
SPGDPRNativePrivacyManagerViewController <.. SPGDPRNativePrivacyManagerViewController35 : ext
SPGDPRManagePreferenceViewController <.. SPGDPRManagePreferenceViewController36 : ext
SPGDPRCategoryDetailsViewController <.. SPGDPRCategoryDetailsViewController37 : ext
SPGDPRVendorDetailsViewController <.. SPGDPRVendorDetailsViewController38 : ext
UILabel <.. UILabel39 : ext
SPCCPAVendorDetailsViewController <.. SPCCPAVendorDetailsViewController40 : ext
SPCCPACategoryDetailsViewController <.. SPCCPACategoryDetailsViewController41 : ext
SPCCPANativePrivacyManagerViewController <.. SPCCPANativePrivacyManagerViewController42 : ext
SPCCPANativePrivacyManagerViewController <.. SPCCPANativePrivacyManagerViewController43 : ext
SPCCPANativePrivacyManagerViewController <.. SPCCPANativePrivacyManagerViewController44 : ext
SPCCPAPartnersViewController <.. SPCCPAPartnersViewController45 : ext
SPCCPAManagePreferenceViewController <.. SPCCPAManagePreferenceViewController46 : ext
RenderingAppEvents <.. RenderingAppEvents47 : ext
RenderingAppEvents <.. RenderingAppEvents48 : ext
RenderingAppEvents <.. RenderingAppEvents49 : ext
SPJson <.. SPJson51 : ext
@enduml
