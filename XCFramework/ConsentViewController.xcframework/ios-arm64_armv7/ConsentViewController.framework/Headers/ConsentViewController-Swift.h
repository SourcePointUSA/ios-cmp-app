#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef CONSENTVIEWCONTROLLER_SWIFT_H
#define CONSENTVIEWCONTROLLER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ConsentViewController",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC21ConsentViewController14AttributeStyle")
@interface AttributeStyle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSCoder;

SWIFT_CLASS("_TtC21ConsentViewController30GDPRConsentViewControllerError")
@interface GDPRConsentViewControllerError : NSError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull spDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC21ConsentViewController22ConnectionTimeOutError")
@interface ConnectionTimeOutError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum GDPRActionType : NSInteger;

/// Action consists of <code>GDPRActionType</code> and an id. Those come from each action the user can take in the ConsentUI
SWIFT_CLASS("_TtC21ConsentViewController10GDPRAction")
@interface GDPRAction : NSObject
@property (nonatomic, readonly) enum GDPRActionType type;
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable consentLanguage;
@property (nonatomic, readonly, copy) NSData * _Nonnull payload;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum GDPRActionType)type id:(NSString * _Nullable)id consentLanguage:(NSString * _Nullable)consentLanguage payload:(NSData * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// User actions. Its integer representation matches with what SourcePoint’s endpoints expect.
typedef SWIFT_ENUM(NSInteger, GDPRActionType, open) {
  GDPRActionTypeSaveAndExit = 1,
  GDPRActionTypePMCancel = 2,
  GDPRActionTypeAcceptAll = 11,
  GDPRActionTypeShowPrivacyManager = 12,
  GDPRActionTypeRejectAll = 13,
  GDPRActionTypeDismiss = 15,
};

/// Tells the SDK if we should load stage or public campaigns.
/// <ul>
///   <li>
///     0 -> <code>GDPRCampaignEnv.Stage</code>
///   </li>
///   <li>
///     1 -> <code>GDPRCampaignEnv.Public</code>
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, GDPRCampaignEnv, open) {
  GDPRCampaignEnvStage = 0,
  GDPRCampaignEnvPublic = 1,
};

@class GDPRMessage;
@class GDPRUserConsent;

/// ConsentDelegate encapsulates all SDKs lifecycle methods.
/// Have a look at <a href="https://github.com/SourcePointUSA/CCPA_iOS_SDK/wiki/SDKs-Lifecycle-methods">SDKs Lifecycle</a>
SWIFT_PROTOCOL("_TtP21ConsentViewController19GDPRConsentDelegate_")
@protocol GDPRConsentDelegate
@optional
/// called when there’s a consent Message to be shown or before the PM is shown <em><em>deprecated</em></em>
- (void)consentUIWillShow;
/// called when there’s a consent Message to be shown or before the PM is shown
- (void)gdprConsentUIWillShow;
/// called when there’s a consent Message to be shown or before the PM is shown
- (void)consentUIWillShowWithMessage:(GDPRMessage * _Nonnull)message;
/// called when the consent message is about to show
- (void)messageWillShow;
/// called when the privacy manager is about to show
- (void)gdprPMWillShow;
/// called when the privacy manager is closed
- (void)gdprPMDidDisappear;
/// called when the consent message is closed
- (void)messageDidDisappear;
/// called when the user takes an action in the consent ui (message/PM)
/// \param action the user action
///
- (void)onAction:(GDPRAction * _Nonnull)action;
/// called when the consent ui is closed
- (void)consentUIDidDisappear;
/// called when we finish getting the consent profile from SourcePoint’s endpoints
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     gdprUUID: is the uuid we give to that user internally. Notice this is not the same as authId
///   </li>
///   <li>
///     userConsent: is the data structure encapsulating the consent status, rejected vendors and purposes
///   </li>
/// </ul>
- (void)onConsentReadyWithGdprUUID:(NSString * _Nonnull)gdprUUID userConsent:(GDPRUserConsent * _Nonnull)userConsent;
/// the <code>onError</code> function can be called at any moment during the SDKs lifecycle
- (void)onErrorWithError:(GDPRConsentViewControllerError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP21ConsentViewController21GDPRMessageUIDelegate_")
@protocol GDPRMessageUIDelegate
@property (nonatomic, readonly, strong) id <GDPRConsentDelegate> _Nullable consentDelegate;
- (void)loadMessageFromUrl:(NSURL * _Nonnull)url;
- (void)loadPrivacyManager;
@end

enum SPMessageLanguage : NSInteger;
enum SPPrivacyManagerTab : NSInteger;
@class GDPRPropertyName;
@class NSBundle;

SWIFT_CLASS("_TtC21ConsentViewController25GDPRConsentViewController")
@interface GDPRConsentViewController : UIViewController <GDPRMessageUIDelegate>
/// The version of the SDK. It should mirror the version from podspec.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VERSION;)
+ (NSString * _Nonnull)VERSION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SP_GDPR_KEY_PREFIX;)
+ (NSString * _Nonnull)SP_GDPR_KEY_PREFIX SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IAB_KEY_PREFIX;)
+ (NSString * _Nonnull)IAB_KEY_PREFIX SWIFT_WARN_UNUSED_RESULT;
/// Resets the data stored by the SDK in the UserDefaults
+ (void)clearAllData;
/// The IAB consent string, set after the user has chosen after interacting with the ConsentViewController
@property (nonatomic, readonly, copy) NSString * _Nonnull euconsent;
/// The UUID assigned to a user, available after calling <code>loadMessage</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull gdprUUID;
/// All consent data we have in memory and stored on UserDefaults
@property (nonatomic, readonly, strong) GDPRUserConsent * _Nonnull userConsents;
/// The timeout interval in seconds for the message being displayed
@property (nonatomic) NSTimeInterval messageTimeoutInSeconds;
/// Instructs the message to be displayed in this language. If the translation is missing, the fallback will be English.
/// By default the SDK will use the locale defined by the WebView
@property (nonatomic) enum SPMessageLanguage messageLanguage;
/// Instructs the privacy manager to be displayed with this tab.
/// By default the SDK will use the defult tab of PM
@property (nonatomic) enum SPPrivacyManagerTab privacyManagerTab;
/// will instruct the SDK to clean consent data if an error occurs
@property (nonatomic) BOOL shouldCleanConsentOnError;
/// will instruct the SDK to call the error metrics if an error occurs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldCallErrorMetrics;)
+ (BOOL)shouldCallErrorMetrics SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldCallErrorMetrics:(BOOL)value;
/// the instance of <code>GDPRConsentDelegate</code> which the <code>GDPRConsentViewController</code> will use to perform the lifecycle methods
@property (nonatomic, weak) id <GDPRConsentDelegate> _Nullable consentDelegate;
/// seealso:
/// ConsentDelegate
/// \param accountId the id of your account, can be found in the Account section of SourcePoint’s dashboard
///
/// \param propertyId the id of your property, can be found in the property page of SourcePoint’s dashboard
///
/// \param propertyName the exact name of your property,
///
/// \param PMId the id of the PrivacyManager, can be found in the PrivacyManager page of SourcePoint’s dashboard
///
/// \param campaignEnv Indicates if the SDK should load the message from the Public or Stage campaign
///
/// \param targetingParams an arbitrary collection of key/value pairs made available to the Scenario built on SourcePoint’s dashboard
///
/// \param consentDelegate responsible for dealing with the different consent lifecycle functions.
///
- (nonnull instancetype)initWithAccountId:(NSInteger)accountId propertyId:(NSInteger)propertyId propertyName:(GDPRPropertyName * _Nonnull)propertyName PMId:(NSString * _Nonnull)PMId campaignEnv:(enum GDPRCampaignEnv)campaignEnv targetingParams:(NSDictionary<NSString *, NSString *> * _Nonnull)targetingParams consentDelegate:(id <GDPRConsentDelegate> _Nonnull)consentDelegate;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadNativeMessageForAuthId:(NSString * _Nullable)authId;
- (void)loadMessageFromUrl:(NSURL * _Nonnull)url;
/// Will first check if there’s a message to show according to the scenario
/// If there is, we’ll load the message in a WebView and call <code>ConsentDelegate.onConsentUIWillShow</code>
/// Otherwise, we short circuit to <code>ConsentDelegate.onConsentReady</code>
- (void)loadMessage;
/// Will first check if there’s a message to show according to the scenario, for the <code>authId</code> provided.
/// If there is, we’ll load the message in a WebView and call <code>ConsentDelegate.onConsentUIWillShow</code>
/// Otherwise, we short circuit to <code>ConsentDelegate.onConsentReady</code>
/// \param authId any arbitrary token that uniquely identifies an user in your system.
///
- (void)loadMessageForAuthId:(NSString * _Nullable)authId;
/// Loads the PrivacyManager (that popup with the toggles) in a WebView
/// If the user changes her consents we call <code>ConsentDelegate.onConsentReady</code>
- (void)loadPrivacyManager;
/// Clears all IAB related data from the UserDefaults
- (void)clearIABConsentData;
/// Clears all consent data from the UserDefaults. Use this method if you want to <em>completely</em> wipe the user’s consent data from the device.
- (void)clearAllData;
/// Add the vendors/categories/legitimateInterestCategories ids to the consent profile of the current user.
/// In order words, programatically consent a user to the above
/// If an error occurs, the <code>GDPRConsentDelegate.onError</code> is called
- (void)customConsentToVendors:(NSArray<NSString *> * _Nonnull)vendors categories:(NSArray<NSString *> * _Nonnull)categories legIntCategories:(NSArray<NSString *> * _Nonnull)legIntCategories completionHandler:(void (^ _Nonnull)(GDPRUserConsent * _Nonnull))completionHandler;
- (void)reportAction:(GDPRAction * _Nonnull)action;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface GDPRConsentViewController (SWIFT_EXTENSION(ConsentViewController)) <GDPRConsentDelegate>
- (void)gdprConsentUIWillShow;
- (void)consentUIDidDisappear;
- (void)onErrorWithError:(GDPRConsentViewControllerError * _Nonnull)error;
- (void)onAction:(GDPRAction * _Nonnull)action;
- (void)onConsentReadyWithGdprUUID:(NSString * _Nonnull)gdprUUID userConsent:(GDPRUserConsent * _Nonnull)userConsent;
- (void)messageWillShow;
- (void)messageDidDisappear;
- (void)gdprPMWillShow;
- (void)gdprPMDidDisappear;
@end



SWIFT_CLASS("_TtC21ConsentViewController11GDPRMessage")
@interface GDPRMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The <code>GDPRMessageViewController</code> is the class responsible for rendering the consent
/// message and privacy manager.
/// note:
/// at the moment we only have one child of <code>MessageViewController</code>
/// (<code>MessageWebViewController</code>) but the idea is to be able to swap the webview
/// with any other class that knows how to render a consent message and a privacy manager.
/// Eg. a native message view controller
SWIFT_CLASS("_TtC21ConsentViewController25GDPRMessageViewController")
@interface GDPRMessageViewController : UIViewController <GDPRMessageUIDelegate>
@property (nonatomic, weak) id <GDPRConsentDelegate> _Nullable consentDelegate;
- (void)loadMessageFromUrl:(NSURL * _Nonnull)url;
- (void)loadPrivacyManager;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC21ConsentViewController31GDPRNativeMessageViewController")
@interface GDPRNativeMessageViewController : UIViewController
- (nonnull instancetype)initWithMessageContents:(GDPRMessage * _Nonnull)messageContents consentViewController:(id <GDPRMessageUIDelegate> _Nonnull)consentViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// GDPRPropertyName is the exact name of your property as created in SourcePoint’s dashboard.
/// important:
/// notice that it can only contain letters, numbers, . (dots), : (semicolons),
/// <ul>
///   <li>
///     (dashes) and / (slashes). The constructor will validate upon that and throw an error otherwise.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC21ConsentViewController16GDPRPropertyName")
@interface GDPRPropertyName : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// \param rawValue the exact name of your property as created in SourcePoint’s dashboard.
///
///
/// throws:
/// <code>InvalidArgumentError</code> if the property name contain anything other than letters, numbers, . (dots), : (semicolons) and / (slashes).
- (nullable instancetype)init:(NSString * _Nonnull)rawValue error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GDPRVendorGrant;

/// GDPRUserConsent encapsulates all consent data from a user.
SWIFT_CLASS("_TtC21ConsentViewController15GDPRUserConsent")
@interface GDPRUserConsent : NSObject
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull acceptedVendors;
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull acceptedCategories;
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull legitimateInterestCategories;
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull specialFeatures;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, GDPRVendorGrant *> * _Nonnull vendorGrants;
/// The iAB consent string.
@property (nonatomic, readonly, copy) NSString * _Nonnull euconsent;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapuslates data about a particular vendor being “granted” based on its purposes
SWIFT_CLASS("_TtC21ConsentViewController15GDPRVendorGrant")
@interface GDPRVendorGrant : NSObject
/// if all purposes are granted, the vendorGrant will be set to <code>true</code>
@property (nonatomic, readonly) BOOL vendorGrant;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull purposeGrants;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVendorGrant:(BOOL)vendorGrant purposeGrants:(NSDictionary<NSString *, NSNumber *> * _Nonnull)purposeGrants OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC21ConsentViewController19GenericNetworkError")
@interface GenericNetworkError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController19InternalServerError")
@interface InternalServerError : GenericNetworkError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@end


SWIFT_CLASS("_TtC21ConsentViewController20InvalidArgumentError")
@interface InvalidArgumentError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Invalid Rendering App (JSReceiver) event payloads
SWIFT_CLASS("_TtC21ConsentViewController24InvalidEventPayloadError")
@interface InvalidEventPayloadError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController32InvalidOnActionEventPayloadError")
@interface InvalidOnActionEventPayloadError : InvalidEventPayloadError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@end


/// Invalid Request Error
SWIFT_CLASS("_TtC21ConsentViewController19InvalidRequestError")
@interface InvalidRequestError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@end


/// Invalid API Response Errors
SWIFT_CLASS("_TtC21ConsentViewController20InvalidResponseError")
@interface InvalidResponseError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@end


SWIFT_CLASS("_TtC21ConsentViewController27InvalidResponseConsentError")
@interface InvalidResponseConsentError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController26InvalidResponseCustomError")
@interface InvalidResponseCustomError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC21ConsentViewController33InvalidResponseNativeMessageError")
@interface InvalidResponseNativeMessageError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController30InvalidResponseWebMessageError")
@interface InvalidResponseWebMessageError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController15InvalidURLError")
@interface InvalidURLError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController16MessageAttribute")
@interface MessageAttribute : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC21ConsentViewController13MessageAction")
@interface MessageAction : MessageAttribute
@end



/// Network Errors
SWIFT_CLASS("_TtC21ConsentViewController20NoInternetConnection")
@interface NoInternetConnection : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController32PostingConsentWithoutConsentUUID")
@interface PostingConsentWithoutConsentUUID : InvalidRequestError
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController17RenderingAppError")
@interface RenderingAppError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nullable renderingAppErrorCode;
@end


SWIFT_CLASS("_TtC21ConsentViewController21ResourceNotFoundError")
@interface ResourceNotFoundError : GenericNetworkError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@end

/// Languages supported by Message and PM
typedef SWIFT_ENUM(NSInteger, SPMessageLanguage, open) {
  SPMessageLanguageBrowserDefault = 0,
  SPMessageLanguageEnglish = 1,
  SPMessageLanguageBulgarian = 2,
  SPMessageLanguageCatalan = 3,
  SPMessageLanguageChinese = 4,
  SPMessageLanguageCroatian = 5,
  SPMessageLanguageCzech = 6,
  SPMessageLanguageDanish = 7,
  SPMessageLanguageDutch = 8,
  SPMessageLanguageEstonian = 9,
  SPMessageLanguageFinnish = 10,
  SPMessageLanguageFrench = 11,
  SPMessageLanguageGaelic = 12,
  SPMessageLanguageGerman = 13,
  SPMessageLanguageGreek = 14,
  SPMessageLanguageHungarian = 15,
  SPMessageLanguageIcelandic = 16,
  SPMessageLanguageItalian = 17,
  SPMessageLanguageJapanese = 18,
  SPMessageLanguageLatvian = 19,
  SPMessageLanguageLithuanian = 20,
  SPMessageLanguageNorwegian = 21,
  SPMessageLanguagePolish = 22,
  SPMessageLanguagePortuguese = 23,
  SPMessageLanguageRomanian = 24,
  SPMessageLanguageRussian = 25,
  SPMessageLanguageSerbian_Cyrillic = 26,
  SPMessageLanguageSerbian_Latin = 27,
  SPMessageLanguageSlovakian = 28,
  SPMessageLanguageSlovenian = 29,
  SPMessageLanguageSpanish = 30,
  SPMessageLanguageSwedish = 31,
  SPMessageLanguageTurkish = 32,
};

/// Supported privacy manager tabs in PM
typedef SWIFT_ENUM(NSInteger, SPPrivacyManagerTab, open) {
  SPPrivacyManagerTabDefault = 0,
  SPPrivacyManagerTabPurposes = 1,
  SPPrivacyManagerTabVendors = 2,
  SPPrivacyManagerTabFeatures = 3,
};




SWIFT_CLASS("_TtC21ConsentViewController22UnableToLoadJSReceiver")
@interface UnableToLoadJSReceiver : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



@interface WKWebView (SWIFT_EXTENSION(ConsentViewController))
/// Injects the cookie <code>authId</code> in the webview before loading its content.
/// SourcePoint’s web SDK reads the <code>authId</code> cookie and set everything up in the webview context.
- (void)setConsentForAuthId:(NSString * _Nonnull)authId;
/// Reads the value of the cookie authId
- (void)getAuthIdWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC21ConsentViewController12WebViewError")
@interface WebViewError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef CONSENTVIEWCONTROLLER_SWIFT_H
#define CONSENTVIEWCONTROLLER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ConsentViewController",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC21ConsentViewController14AttributeStyle")
@interface AttributeStyle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSCoder;

SWIFT_CLASS("_TtC21ConsentViewController30GDPRConsentViewControllerError")
@interface GDPRConsentViewControllerError : NSError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull spDescription;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC21ConsentViewController22ConnectionTimeOutError")
@interface ConnectionTimeOutError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

enum GDPRActionType : NSInteger;

/// Action consists of <code>GDPRActionType</code> and an id. Those come from each action the user can take in the ConsentUI
SWIFT_CLASS("_TtC21ConsentViewController10GDPRAction")
@interface GDPRAction : NSObject
@property (nonatomic, readonly) enum GDPRActionType type;
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly, copy) NSString * _Nullable consentLanguage;
@property (nonatomic, readonly, copy) NSData * _Nonnull payload;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithType:(enum GDPRActionType)type id:(NSString * _Nullable)id consentLanguage:(NSString * _Nullable)consentLanguage payload:(NSData * _Nonnull)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// User actions. Its integer representation matches with what SourcePoint’s endpoints expect.
typedef SWIFT_ENUM(NSInteger, GDPRActionType, open) {
  GDPRActionTypeSaveAndExit = 1,
  GDPRActionTypePMCancel = 2,
  GDPRActionTypeAcceptAll = 11,
  GDPRActionTypeShowPrivacyManager = 12,
  GDPRActionTypeRejectAll = 13,
  GDPRActionTypeDismiss = 15,
};

/// Tells the SDK if we should load stage or public campaigns.
/// <ul>
///   <li>
///     0 -> <code>GDPRCampaignEnv.Stage</code>
///   </li>
///   <li>
///     1 -> <code>GDPRCampaignEnv.Public</code>
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, GDPRCampaignEnv, open) {
  GDPRCampaignEnvStage = 0,
  GDPRCampaignEnvPublic = 1,
};

@class GDPRMessage;
@class GDPRUserConsent;

/// ConsentDelegate encapsulates all SDKs lifecycle methods.
/// Have a look at <a href="https://github.com/SourcePointUSA/CCPA_iOS_SDK/wiki/SDKs-Lifecycle-methods">SDKs Lifecycle</a>
SWIFT_PROTOCOL("_TtP21ConsentViewController19GDPRConsentDelegate_")
@protocol GDPRConsentDelegate
@optional
/// called when there’s a consent Message to be shown or before the PM is shown <em><em>deprecated</em></em>
- (void)consentUIWillShow;
/// called when there’s a consent Message to be shown or before the PM is shown
- (void)gdprConsentUIWillShow;
/// called when there’s a consent Message to be shown or before the PM is shown
- (void)consentUIWillShowWithMessage:(GDPRMessage * _Nonnull)message;
/// called when the consent message is about to show
- (void)messageWillShow;
/// called when the privacy manager is about to show
- (void)gdprPMWillShow;
/// called when the privacy manager is closed
- (void)gdprPMDidDisappear;
/// called when the consent message is closed
- (void)messageDidDisappear;
/// called when the user takes an action in the consent ui (message/PM)
/// \param action the user action
///
- (void)onAction:(GDPRAction * _Nonnull)action;
/// called when the consent ui is closed
- (void)consentUIDidDisappear;
/// called when we finish getting the consent profile from SourcePoint’s endpoints
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     gdprUUID: is the uuid we give to that user internally. Notice this is not the same as authId
///   </li>
///   <li>
///     userConsent: is the data structure encapsulating the consent status, rejected vendors and purposes
///   </li>
/// </ul>
- (void)onConsentReadyWithGdprUUID:(NSString * _Nonnull)gdprUUID userConsent:(GDPRUserConsent * _Nonnull)userConsent;
/// the <code>onError</code> function can be called at any moment during the SDKs lifecycle
- (void)onErrorWithError:(GDPRConsentViewControllerError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP21ConsentViewController21GDPRMessageUIDelegate_")
@protocol GDPRMessageUIDelegate
@property (nonatomic, readonly, strong) id <GDPRConsentDelegate> _Nullable consentDelegate;
- (void)loadMessageFromUrl:(NSURL * _Nonnull)url;
- (void)loadPrivacyManager;
@end

enum SPMessageLanguage : NSInteger;
enum SPPrivacyManagerTab : NSInteger;
@class GDPRPropertyName;
@class NSBundle;

SWIFT_CLASS("_TtC21ConsentViewController25GDPRConsentViewController")
@interface GDPRConsentViewController : UIViewController <GDPRMessageUIDelegate>
/// The version of the SDK. It should mirror the version from podspec.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VERSION;)
+ (NSString * _Nonnull)VERSION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SP_GDPR_KEY_PREFIX;)
+ (NSString * _Nonnull)SP_GDPR_KEY_PREFIX SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IAB_KEY_PREFIX;)
+ (NSString * _Nonnull)IAB_KEY_PREFIX SWIFT_WARN_UNUSED_RESULT;
/// Resets the data stored by the SDK in the UserDefaults
+ (void)clearAllData;
/// The IAB consent string, set after the user has chosen after interacting with the ConsentViewController
@property (nonatomic, readonly, copy) NSString * _Nonnull euconsent;
/// The UUID assigned to a user, available after calling <code>loadMessage</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull gdprUUID;
/// All consent data we have in memory and stored on UserDefaults
@property (nonatomic, readonly, strong) GDPRUserConsent * _Nonnull userConsents;
/// The timeout interval in seconds for the message being displayed
@property (nonatomic) NSTimeInterval messageTimeoutInSeconds;
/// Instructs the message to be displayed in this language. If the translation is missing, the fallback will be English.
/// By default the SDK will use the locale defined by the WebView
@property (nonatomic) enum SPMessageLanguage messageLanguage;
/// Instructs the privacy manager to be displayed with this tab.
/// By default the SDK will use the defult tab of PM
@property (nonatomic) enum SPPrivacyManagerTab privacyManagerTab;
/// will instruct the SDK to clean consent data if an error occurs
@property (nonatomic) BOOL shouldCleanConsentOnError;
/// will instruct the SDK to call the error metrics if an error occurs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL shouldCallErrorMetrics;)
+ (BOOL)shouldCallErrorMetrics SWIFT_WARN_UNUSED_RESULT;
+ (void)setShouldCallErrorMetrics:(BOOL)value;
/// the instance of <code>GDPRConsentDelegate</code> which the <code>GDPRConsentViewController</code> will use to perform the lifecycle methods
@property (nonatomic, weak) id <GDPRConsentDelegate> _Nullable consentDelegate;
/// seealso:
/// ConsentDelegate
/// \param accountId the id of your account, can be found in the Account section of SourcePoint’s dashboard
///
/// \param propertyId the id of your property, can be found in the property page of SourcePoint’s dashboard
///
/// \param propertyName the exact name of your property,
///
/// \param PMId the id of the PrivacyManager, can be found in the PrivacyManager page of SourcePoint’s dashboard
///
/// \param campaignEnv Indicates if the SDK should load the message from the Public or Stage campaign
///
/// \param targetingParams an arbitrary collection of key/value pairs made available to the Scenario built on SourcePoint’s dashboard
///
/// \param consentDelegate responsible for dealing with the different consent lifecycle functions.
///
- (nonnull instancetype)initWithAccountId:(NSInteger)accountId propertyId:(NSInteger)propertyId propertyName:(GDPRPropertyName * _Nonnull)propertyName PMId:(NSString * _Nonnull)PMId campaignEnv:(enum GDPRCampaignEnv)campaignEnv targetingParams:(NSDictionary<NSString *, NSString *> * _Nonnull)targetingParams consentDelegate:(id <GDPRConsentDelegate> _Nonnull)consentDelegate;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadNativeMessageForAuthId:(NSString * _Nullable)authId;
- (void)loadMessageFromUrl:(NSURL * _Nonnull)url;
/// Will first check if there’s a message to show according to the scenario
/// If there is, we’ll load the message in a WebView and call <code>ConsentDelegate.onConsentUIWillShow</code>
/// Otherwise, we short circuit to <code>ConsentDelegate.onConsentReady</code>
- (void)loadMessage;
/// Will first check if there’s a message to show according to the scenario, for the <code>authId</code> provided.
/// If there is, we’ll load the message in a WebView and call <code>ConsentDelegate.onConsentUIWillShow</code>
/// Otherwise, we short circuit to <code>ConsentDelegate.onConsentReady</code>
/// \param authId any arbitrary token that uniquely identifies an user in your system.
///
- (void)loadMessageForAuthId:(NSString * _Nullable)authId;
/// Loads the PrivacyManager (that popup with the toggles) in a WebView
/// If the user changes her consents we call <code>ConsentDelegate.onConsentReady</code>
- (void)loadPrivacyManager;
/// Clears all IAB related data from the UserDefaults
- (void)clearIABConsentData;
/// Clears all consent data from the UserDefaults. Use this method if you want to <em>completely</em> wipe the user’s consent data from the device.
- (void)clearAllData;
/// Add the vendors/categories/legitimateInterestCategories ids to the consent profile of the current user.
/// In order words, programatically consent a user to the above
/// If an error occurs, the <code>GDPRConsentDelegate.onError</code> is called
- (void)customConsentToVendors:(NSArray<NSString *> * _Nonnull)vendors categories:(NSArray<NSString *> * _Nonnull)categories legIntCategories:(NSArray<NSString *> * _Nonnull)legIntCategories completionHandler:(void (^ _Nonnull)(GDPRUserConsent * _Nonnull))completionHandler;
- (void)reportAction:(GDPRAction * _Nonnull)action;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface GDPRConsentViewController (SWIFT_EXTENSION(ConsentViewController)) <GDPRConsentDelegate>
- (void)gdprConsentUIWillShow;
- (void)consentUIDidDisappear;
- (void)onErrorWithError:(GDPRConsentViewControllerError * _Nonnull)error;
- (void)onAction:(GDPRAction * _Nonnull)action;
- (void)onConsentReadyWithGdprUUID:(NSString * _Nonnull)gdprUUID userConsent:(GDPRUserConsent * _Nonnull)userConsent;
- (void)messageWillShow;
- (void)messageDidDisappear;
- (void)gdprPMWillShow;
- (void)gdprPMDidDisappear;
@end



SWIFT_CLASS("_TtC21ConsentViewController11GDPRMessage")
@interface GDPRMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The <code>GDPRMessageViewController</code> is the class responsible for rendering the consent
/// message and privacy manager.
/// note:
/// at the moment we only have one child of <code>MessageViewController</code>
/// (<code>MessageWebViewController</code>) but the idea is to be able to swap the webview
/// with any other class that knows how to render a consent message and a privacy manager.
/// Eg. a native message view controller
SWIFT_CLASS("_TtC21ConsentViewController25GDPRMessageViewController")
@interface GDPRMessageViewController : UIViewController <GDPRMessageUIDelegate>
@property (nonatomic, weak) id <GDPRConsentDelegate> _Nullable consentDelegate;
- (void)loadMessageFromUrl:(NSURL * _Nonnull)url;
- (void)loadPrivacyManager;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC21ConsentViewController31GDPRNativeMessageViewController")
@interface GDPRNativeMessageViewController : UIViewController
- (nonnull instancetype)initWithMessageContents:(GDPRMessage * _Nonnull)messageContents consentViewController:(id <GDPRMessageUIDelegate> _Nonnull)consentViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// GDPRPropertyName is the exact name of your property as created in SourcePoint’s dashboard.
/// important:
/// notice that it can only contain letters, numbers, . (dots), : (semicolons),
/// <ul>
///   <li>
///     (dashes) and / (slashes). The constructor will validate upon that and throw an error otherwise.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC21ConsentViewController16GDPRPropertyName")
@interface GDPRPropertyName : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// \param rawValue the exact name of your property as created in SourcePoint’s dashboard.
///
///
/// throws:
/// <code>InvalidArgumentError</code> if the property name contain anything other than letters, numbers, . (dots), : (semicolons) and / (slashes).
- (nullable instancetype)init:(NSString * _Nonnull)rawValue error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GDPRVendorGrant;

/// GDPRUserConsent encapsulates all consent data from a user.
SWIFT_CLASS("_TtC21ConsentViewController15GDPRUserConsent")
@interface GDPRUserConsent : NSObject
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull acceptedVendors;
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull acceptedCategories;
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull legitimateInterestCategories;
/// The ids of the accepted vendors and categories. These can be found in SourcePoint’s dashboard
/// important:
/// All ids are related to non-iAB vendors/purposes. For iAB related consent refer to <code>euconsent</code>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull specialFeatures;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, GDPRVendorGrant *> * _Nonnull vendorGrants;
/// The iAB consent string.
@property (nonatomic, readonly, copy) NSString * _Nonnull euconsent;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapuslates data about a particular vendor being “granted” based on its purposes
SWIFT_CLASS("_TtC21ConsentViewController15GDPRVendorGrant")
@interface GDPRVendorGrant : NSObject
/// if all purposes are granted, the vendorGrant will be set to <code>true</code>
@property (nonatomic, readonly) BOOL vendorGrant;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nonnull purposeGrants;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithVendorGrant:(BOOL)vendorGrant purposeGrants:(NSDictionary<NSString *, NSNumber *> * _Nonnull)purposeGrants OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC21ConsentViewController19GenericNetworkError")
@interface GenericNetworkError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController19InternalServerError")
@interface InternalServerError : GenericNetworkError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@end


SWIFT_CLASS("_TtC21ConsentViewController20InvalidArgumentError")
@interface InvalidArgumentError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Invalid Rendering App (JSReceiver) event payloads
SWIFT_CLASS("_TtC21ConsentViewController24InvalidEventPayloadError")
@interface InvalidEventPayloadError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController32InvalidOnActionEventPayloadError")
@interface InvalidOnActionEventPayloadError : InvalidEventPayloadError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@end


/// Invalid Request Error
SWIFT_CLASS("_TtC21ConsentViewController19InvalidRequestError")
@interface InvalidRequestError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@end


/// Invalid API Response Errors
SWIFT_CLASS("_TtC21ConsentViewController20InvalidResponseError")
@interface InvalidResponseError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nullable failureReason;
@end


SWIFT_CLASS("_TtC21ConsentViewController27InvalidResponseConsentError")
@interface InvalidResponseConsentError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController26InvalidResponseCustomError")
@interface InvalidResponseCustomError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC21ConsentViewController33InvalidResponseNativeMessageError")
@interface InvalidResponseNativeMessageError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController30InvalidResponseWebMessageError")
@interface InvalidResponseWebMessageError : InvalidResponseError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController15InvalidURLError")
@interface InvalidURLError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController16MessageAttribute")
@interface MessageAttribute : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC21ConsentViewController13MessageAction")
@interface MessageAction : MessageAttribute
@end



/// Network Errors
SWIFT_CLASS("_TtC21ConsentViewController20NoInternetConnection")
@interface NoInternetConnection : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController32PostingConsentWithoutConsentUUID")
@interface PostingConsentWithoutConsentUUID : InvalidRequestError
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC21ConsentViewController17RenderingAppError")
@interface RenderingAppError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nullable renderingAppErrorCode;
@end


SWIFT_CLASS("_TtC21ConsentViewController21ResourceNotFoundError")
@interface ResourceNotFoundError : GenericNetworkError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@end

/// Languages supported by Message and PM
typedef SWIFT_ENUM(NSInteger, SPMessageLanguage, open) {
  SPMessageLanguageBrowserDefault = 0,
  SPMessageLanguageEnglish = 1,
  SPMessageLanguageBulgarian = 2,
  SPMessageLanguageCatalan = 3,
  SPMessageLanguageChinese = 4,
  SPMessageLanguageCroatian = 5,
  SPMessageLanguageCzech = 6,
  SPMessageLanguageDanish = 7,
  SPMessageLanguageDutch = 8,
  SPMessageLanguageEstonian = 9,
  SPMessageLanguageFinnish = 10,
  SPMessageLanguageFrench = 11,
  SPMessageLanguageGaelic = 12,
  SPMessageLanguageGerman = 13,
  SPMessageLanguageGreek = 14,
  SPMessageLanguageHungarian = 15,
  SPMessageLanguageIcelandic = 16,
  SPMessageLanguageItalian = 17,
  SPMessageLanguageJapanese = 18,
  SPMessageLanguageLatvian = 19,
  SPMessageLanguageLithuanian = 20,
  SPMessageLanguageNorwegian = 21,
  SPMessageLanguagePolish = 22,
  SPMessageLanguagePortuguese = 23,
  SPMessageLanguageRomanian = 24,
  SPMessageLanguageRussian = 25,
  SPMessageLanguageSerbian_Cyrillic = 26,
  SPMessageLanguageSerbian_Latin = 27,
  SPMessageLanguageSlovakian = 28,
  SPMessageLanguageSlovenian = 29,
  SPMessageLanguageSpanish = 30,
  SPMessageLanguageSwedish = 31,
  SPMessageLanguageTurkish = 32,
};

/// Supported privacy manager tabs in PM
typedef SWIFT_ENUM(NSInteger, SPPrivacyManagerTab, open) {
  SPPrivacyManagerTabDefault = 0,
  SPPrivacyManagerTabPurposes = 1,
  SPPrivacyManagerTabVendors = 2,
  SPPrivacyManagerTabFeatures = 3,
};




SWIFT_CLASS("_TtC21ConsentViewController22UnableToLoadJSReceiver")
@interface UnableToLoadJSReceiver : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



@interface WKWebView (SWIFT_EXTENSION(ConsentViewController))
/// Injects the cookie <code>authId</code> in the webview before loading its content.
/// SourcePoint’s web SDK reads the <code>authId</code> cookie and set everything up in the webview context.
- (void)setConsentForAuthId:(NSString * _Nonnull)authId;
/// Reads the value of the cookie authId
- (void)getAuthIdWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC21ConsentViewController12WebViewError")
@interface WebViewError : GDPRConsentViewControllerError
@property (nonatomic, readonly, copy) NSString * _Nonnull spCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
